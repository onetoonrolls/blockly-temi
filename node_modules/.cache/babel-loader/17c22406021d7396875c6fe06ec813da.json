{"ast":null,"code":"// Do not edit this file; automatically generated by gulp.\n\n/* eslint-disable */\n;\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['./blockly_compressed.js'], factory);\n  } else if (typeof exports === 'object') {\n    // Node.js\n    module.exports = factory(require('./blockly_compressed.js'));\n  } else {\n    // Browser\n    root.Blockly.Python = factory(root.Blockly);\n  }\n})(this, function (Blockly) {\n  'use strict';\n\n  Blockly.Python = new Blockly.Generator(\"Python\");\n  Blockly.Python.addReservedWords(\"False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip\");\n  Blockly.Python.ORDER_ATOMIC = 0;\n  Blockly.Python.ORDER_COLLECTION = 1;\n  Blockly.Python.ORDER_STRING_CONVERSION = 1;\n  Blockly.Python.ORDER_MEMBER = 2.1;\n  Blockly.Python.ORDER_FUNCTION_CALL = 2.2;\n  Blockly.Python.ORDER_EXPONENTIATION = 3;\n  Blockly.Python.ORDER_UNARY_SIGN = 4;\n  Blockly.Python.ORDER_BITWISE_NOT = 4;\n  Blockly.Python.ORDER_MULTIPLICATIVE = 5;\n  Blockly.Python.ORDER_ADDITIVE = 6;\n  Blockly.Python.ORDER_BITWISE_SHIFT = 7;\n  Blockly.Python.ORDER_BITWISE_AND = 8;\n  Blockly.Python.ORDER_BITWISE_XOR = 9;\n  Blockly.Python.ORDER_BITWISE_OR = 10;\n  Blockly.Python.ORDER_RELATIONAL = 11;\n  Blockly.Python.ORDER_LOGICAL_NOT = 12;\n  Blockly.Python.ORDER_LOGICAL_AND = 13;\n  Blockly.Python.ORDER_LOGICAL_OR = 14;\n  Blockly.Python.ORDER_CONDITIONAL = 15;\n  Blockly.Python.ORDER_LAMBDA = 16;\n  Blockly.Python.ORDER_NONE = 99;\n  Blockly.Python.ORDER_OVERRIDES = [[Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_MEMBER], [Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_FUNCTION_CALL], [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_MEMBER], [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_FUNCTION_CALL], [Blockly.Python.ORDER_LOGICAL_NOT, Blockly.Python.ORDER_LOGICAL_NOT], [Blockly.Python.ORDER_LOGICAL_AND, Blockly.Python.ORDER_LOGICAL_AND], [Blockly.Python.ORDER_LOGICAL_OR, Blockly.Python.ORDER_LOGICAL_OR]];\n\n  Blockly.Python.init = function (a) {\n    Blockly.Python.PASS = this.INDENT + \"pass\\n\";\n    Blockly.Python.definitions_ = Object.create(null);\n    Blockly.Python.functionNames_ = Object.create(null);\n    Blockly.Python.variableDB_ ? Blockly.Python.variableDB_.reset() : Blockly.Python.variableDB_ = new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n    Blockly.Python.variableDB_.setVariableMap(a.getVariableMap());\n\n    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(Blockly.Python.variableDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE) + \" = None\");\n\n    a = Blockly.Variables.allUsedVarModels(a);\n\n    for (d = 0; d < a.length; d++) b.push(Blockly.Python.variableDB_.getName(a[d].getId(), Blockly.VARIABLE_CATEGORY_NAME) + \" = None\");\n\n    Blockly.Python.definitions_.variables = b.join(\"\\n\");\n  };\n\n  Blockly.Python.finish = function (a) {\n    var b = [],\n        c = [],\n        d;\n\n    for (d in Blockly.Python.definitions_) {\n      var e = Blockly.Python.definitions_[d];\n      e.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/) ? b.push(e) : c.push(e);\n    }\n\n    delete Blockly.Python.definitions_;\n    delete Blockly.Python.functionNames_;\n    Blockly.Python.variableDB_.reset();\n    return (b.join(\"\\n\") + \"\\n\\n\" + c.join(\"\\n\\n\")).replace(/\\n\\n+/g, \"\\n\\n\").replace(/\\n*$/, \"\\n\\n\\n\") + a;\n  };\n\n  Blockly.Python.scrubNakedValue = function (a) {\n    return a + \"\\n\";\n  };\n\n  Blockly.Python.quote_ = function (a) {\n    a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\");\n    var b = \"'\";\n    -1 !== a.indexOf(\"'\") && (-1 === a.indexOf('\"') ? b = '\"' : a = a.replace(/'/g, \"\\\\'\"));\n    return b + a + b;\n  };\n\n  Blockly.Python.multiline_quote_ = function (a) {\n    return a.split(/\\n/g).map(Blockly.Python.quote_).join(\" + '\\\\n' + \\n\");\n  };\n\n  Blockly.Python.scrub_ = function (a, b, c) {\n    var d = \"\";\n\n    if (!a.outputConnection || !a.outputConnection.targetConnection) {\n      var e = a.getCommentText();\n      e && (e = Blockly.utils.string.wrap(e, Blockly.Python.COMMENT_WRAP - 3), d += Blockly.Python.prefixLines(e + \"\\n\", \"# \"));\n\n      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.INPUT_VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = Blockly.Python.allNestedComments(e)) && (d += Blockly.Python.prefixLines(e, \"# \"));\n    }\n\n    a = a.nextConnection && a.nextConnection.targetBlock();\n    c = c ? \"\" : Blockly.Python.blockToCode(a);\n    return d + b + c;\n  };\n\n  Blockly.Python.getAdjustedInt = function (a, b, c, d) {\n    c = c || 0;\n    a.workspace.options.oneBasedIndex && c--;\n    var e = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n    a = Blockly.Python.valueToCode(a, b, c ? Blockly.Python.ORDER_ADDITIVE : Blockly.Python.ORDER_NONE) || e;\n    Blockly.isNumber(a) ? (a = parseInt(a, 10) + c, d && (a = -a)) : (a = 0 < c ? \"int(\" + a + \" + \" + c + \")\" : 0 > c ? \"int(\" + a + \" - \" + -c + \")\" : \"int(\" + a + \")\", d && (a = \"-\" + a));\n    return a;\n  };\n\n  Blockly.Python.colour = {};\n\n  Blockly.Python.colour_picker = function (a) {\n    return [Blockly.Python.quote_(a.getFieldValue(\"COLOUR\")), Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.colour_random = function (a) {\n    Blockly.Python.definitions_.import_random = \"import random\";\n    return [\"'#%06x' % random.randint(0, 2**24 - 1)\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.colour_rgb = function (a) {\n    var b = Blockly.Python.provideFunction_(\"colour_rgb\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(r, g, b):\", \"  r = round(min(100, max(0, r)) * 2.55)\", \"  g = round(min(100, max(0, g)) * 2.55)\", \"  b = round(min(100, max(0, b)) * 2.55)\", \"  return '#%02x%02x%02x' % (r, g, b)\"]),\n        c = Blockly.Python.valueToCode(a, \"RED\", Blockly.Python.ORDER_NONE) || 0,\n        d = Blockly.Python.valueToCode(a, \"GREEN\", Blockly.Python.ORDER_NONE) || 0;\n    a = Blockly.Python.valueToCode(a, \"BLUE\", Blockly.Python.ORDER_NONE) || 0;\n    return [b + \"(\" + c + \", \" + d + \", \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.colour_blend = function (a) {\n    var b = Blockly.Python.provideFunction_(\"colour_blend\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(colour1, colour2, ratio):\", \"  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\", \"  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\", \"  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\", \"  ratio = min(1, max(0, ratio))\", \"  r = round(r1 * (1 - ratio) + r2 * ratio)\", \"  g = round(g1 * (1 - ratio) + g2 * ratio)\", \"  b = round(b1 * (1 - ratio) + b2 * ratio)\", \"  return '#%02x%02x%02x' % (r, g, b)\"]),\n        c = Blockly.Python.valueToCode(a, \"COLOUR1\", Blockly.Python.ORDER_NONE) || \"'#000000'\",\n        d = Blockly.Python.valueToCode(a, \"COLOUR2\", Blockly.Python.ORDER_NONE) || \"'#000000'\";\n    a = Blockly.Python.valueToCode(a, \"RATIO\", Blockly.Python.ORDER_NONE) || 0;\n    return [b + \"(\" + c + \", \" + d + \", \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists = {};\n\n  Blockly.Python.lists_create_empty = function (a) {\n    return [\"[]\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.lists_create_with = function (a) {\n    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Python.valueToCode(a, \"ADD\" + c, Blockly.Python.ORDER_NONE) || \"None\";\n\n    return [\"[\" + b.join(\", \") + \"]\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.lists_repeat = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"ITEM\", Blockly.Python.ORDER_NONE) || \"None\";\n    a = Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\";\n    return [\"[\" + b + \"] * \" + a, Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.lists_length = function (a) {\n    return [\"len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"[]\") + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_isEmpty = function (a) {\n    return [\"not len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"[]\") + \")\", Blockly.Python.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.Python.lists_indexOf = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"FIND\", Blockly.Python.ORDER_NONE) || \"[]\",\n        c = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"''\";\n    if (a.workspace.options.oneBasedIndex) var d = \" 0\",\n        e = \" + 1\",\n        f = \"\";else d = \" -1\", e = \"\", f = \" - 1\";\n    if (\"FIRST\" == a.getFieldValue(\"END\")) return a = Blockly.Python.provideFunction_(\"first_index\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(my_list, elem):\", \"  try: index = my_list.index(elem)\" + e, \"  except: index =\" + d, \"  return index\"]), [a + \"(\" + c + \", \" + b + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n    a = Blockly.Python.provideFunction_(\"last_index\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(my_list, elem):\", \"  try: index = len(my_list) - my_list[::-1].index(elem)\" + f, \"  except: index =\" + d, \"  return index\"]);\n    return [a + \"(\" + c + \", \" + b + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_getIndex = function (a) {\n    var b = a.getFieldValue(\"MODE\") || \"GET\",\n        c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = Blockly.Python.valueToCode(a, \"VALUE\", \"RANDOM\" == c ? Blockly.Python.ORDER_NONE : Blockly.Python.ORDER_MEMBER) || \"[]\";\n\n    switch (c) {\n      case \"FIRST\":\n        if (\"GET\" == b) return [d + \"[0]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop(0)\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop(0)\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"GET\" == b) return [d + \"[-1]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop()\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop()\\n\";\n        break;\n\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\");\n        if (\"GET\" == b) return [d + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop(\" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop(\" + a + \")\\n\";\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\", 1, !0);\n        if (\"GET\" == b) return [d + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n        if (\"GET_REMOVE\" == b) return [d + \".pop(\" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \".pop(\" + a + \")\\n\";\n        break;\n\n      case \"RANDOM\":\n        Blockly.Python.definitions_.import_random = \"import random\";\n        if (\"GET\" == b) return [\"random.choice(\" + d + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n        d = Blockly.Python.provideFunction_(\"lists_remove_random_item\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(myList):\", \"  x = int(random.random() * len(myList))\", \"  return myList.pop(x)\"]) + \"(\" + d + \")\";\n        if (\"GET_REMOVE\" == b) return [d, Blockly.Python.ORDER_FUNCTION_CALL];\n        if (\"REMOVE\" == b) return d + \"\\n\";\n    }\n\n    throw Error(\"Unhandled combination (lists_getIndex).\");\n  };\n\n  Blockly.Python.lists_setIndex = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_MEMBER) || \"[]\",\n        c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        e = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"None\";\n\n    switch (d) {\n      case \"FIRST\":\n        if (\"SET\" == c) return b + \"[0] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".insert(0, \" + e + \")\\n\";\n        break;\n\n      case \"LAST\":\n        if (\"SET\" == c) return b + \"[-1] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".append(\" + e + \")\\n\";\n        break;\n\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\");\n        if (\"SET\" == c) return b + \"[\" + a + \"] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".insert(\" + a + \", \" + e + \")\\n\";\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT\", 1, !0);\n        if (\"SET\" == c) return b + \"[\" + a + \"] = \" + e + \"\\n\";\n        if (\"INSERT\" == c) return b + \".insert(\" + a + \", \" + e + \")\\n\";\n        break;\n\n      case \"RANDOM\":\n        Blockly.Python.definitions_.import_random = \"import random\";\n        b.match(/^\\w+$/) ? a = \"\" : (a = Blockly.Python.variableDB_.getDistinctName(\"tmp_list\", Blockly.VARIABLE_CATEGORY_NAME), d = a + \" = \" + b + \"\\n\", b = a, a = d);\n        d = Blockly.Python.variableDB_.getDistinctName(\"tmp_x\", Blockly.VARIABLE_CATEGORY_NAME);\n        a += d + \" = int(random.random() * len(\" + b + \"))\\n\";\n        if (\"SET\" == c) return a + (b + \"[\" + d + \"] = \" + e + \"\\n\");\n        if (\"INSERT\" == c) return a + (b + \".insert(\" + d + \", \" + e + \")\\n\");\n    }\n\n    throw Error(\"Unhandled combination (lists_setIndex).\");\n  };\n\n  Blockly.Python.lists_getSublist = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_MEMBER) || \"[]\",\n        c = a.getFieldValue(\"WHERE1\"),\n        d = a.getFieldValue(\"WHERE2\");\n\n    switch (c) {\n      case \"FROM_START\":\n        c = Blockly.Python.getAdjustedInt(a, \"AT1\");\n        \"0\" == c && (c = \"\");\n        break;\n\n      case \"FROM_END\":\n        c = Blockly.Python.getAdjustedInt(a, \"AT1\", 1, !0);\n        break;\n\n      case \"FIRST\":\n        c = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (lists_getSublist)\");\n    }\n\n    switch (d) {\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 1);\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 0, !0);\n        Blockly.isNumber(String(a)) ? \"0\" == a && (a = \"\") : (Blockly.Python.definitions_.import_sys = \"import sys\", a += \" or sys.maxsize\");\n        break;\n\n      case \"LAST\":\n        a = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (lists_getSublist)\");\n    }\n\n    return [b + \"[\" + c + \" : \" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.lists_sort = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_NONE) || \"[]\",\n        c = a.getFieldValue(\"TYPE\");\n    a = \"1\" === a.getFieldValue(\"DIRECTION\") ? \"False\" : \"True\";\n    return [Blockly.Python.provideFunction_(\"lists_sort\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(my_list, type, reverse):\", \"  def try_float(s):\", \"    try:\", \"      return float(s)\", \"    except:\", \"      return 0\", \"  key_funcs = {\", '    \"NUMERIC\": try_float,', '    \"TEXT\": str,', '    \"IGNORE_CASE\": lambda s: str(s).lower()', \"  }\", \"  key_func = key_funcs[type]\", \"  list_cpy = list(my_list)\", \"  return sorted(list_cpy, key=key_func, reverse=reverse)\"]) + \"(\" + b + ', \"' + c + '\", ' + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_split = function (a) {\n    var b = a.getFieldValue(\"MODE\");\n    if (\"SPLIT\" == b) b = Blockly.Python.valueToCode(a, \"INPUT\", Blockly.Python.ORDER_MEMBER) || \"''\", a = Blockly.Python.valueToCode(a, \"DELIM\", Blockly.Python.ORDER_NONE), a = b + \".split(\" + a + \")\";else if (\"JOIN\" == b) b = Blockly.Python.valueToCode(a, \"INPUT\", Blockly.Python.ORDER_NONE) || \"[]\", a = Blockly.Python.valueToCode(a, \"DELIM\", Blockly.Python.ORDER_MEMBER) || \"''\", a = a + \".join(\" + b + \")\";else throw Error(\"Unknown mode: \" + b);\n    return [a, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.lists_reverse = function (a) {\n    return [\"list(reversed(\" + (Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_NONE) || \"[]\") + \"))\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.logic = {};\n\n  Blockly.Python.controls_if = function (a) {\n    var b = 0,\n        c = \"\";\n    Blockly.Python.STATEMENT_PREFIX && (c += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, a));\n\n    do {\n      var d = Blockly.Python.valueToCode(a, \"IF\" + b, Blockly.Python.ORDER_NONE) || \"False\";\n      var e = Blockly.Python.statementToCode(a, \"DO\" + b) || Blockly.Python.PASS;\n      Blockly.Python.STATEMENT_SUFFIX && (e = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT) + e);\n      c += (0 == b ? \"if \" : \"elif \") + d + \":\\n\" + e;\n      ++b;\n    } while (a.getInput(\"IF\" + b));\n\n    if (a.getInput(\"ELSE\") || Blockly.Python.STATEMENT_SUFFIX) e = Blockly.Python.statementToCode(a, \"ELSE\") || Blockly.Python.PASS, Blockly.Python.STATEMENT_SUFFIX && (e = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT) + e), c += \"else:\\n\" + e;\n    return c;\n  };\n\n  Blockly.Python.controls_ifelse = Blockly.Python.controls_if;\n\n  Blockly.Python.logic_compare = function (a) {\n    var b = {\n      EQ: \"==\",\n      NEQ: \"!=\",\n      LT: \"<\",\n      LTE: \"<=\",\n      GT: \">\",\n      GTE: \">=\"\n    }[a.getFieldValue(\"OP\")],\n        c = Blockly.Python.ORDER_RELATIONAL,\n        d = Blockly.Python.valueToCode(a, \"A\", c) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"B\", c) || \"0\";\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.Python.logic_operation = function (a) {\n    var b = \"AND\" == a.getFieldValue(\"OP\") ? \"and\" : \"or\",\n        c = \"and\" == b ? Blockly.Python.ORDER_LOGICAL_AND : Blockly.Python.ORDER_LOGICAL_OR,\n        d = Blockly.Python.valueToCode(a, \"A\", c);\n    a = Blockly.Python.valueToCode(a, \"B\", c);\n\n    if (d || a) {\n      var e = \"and\" == b ? \"True\" : \"False\";\n      d || (d = e);\n      a || (a = e);\n    } else a = d = \"False\";\n\n    return [d + \" \" + b + \" \" + a, c];\n  };\n\n  Blockly.Python.logic_negate = function (a) {\n    return [\"not \" + (Blockly.Python.valueToCode(a, \"BOOL\", Blockly.Python.ORDER_LOGICAL_NOT) || \"True\"), Blockly.Python.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.Python.logic_boolean = function (a) {\n    return [\"TRUE\" == a.getFieldValue(\"BOOL\") ? \"True\" : \"False\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.logic_null = function (a) {\n    return [\"None\", Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.logic_ternary = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"IF\", Blockly.Python.ORDER_CONDITIONAL) || \"False\",\n        c = Blockly.Python.valueToCode(a, \"THEN\", Blockly.Python.ORDER_CONDITIONAL) || \"None\";\n    a = Blockly.Python.valueToCode(a, \"ELSE\", Blockly.Python.ORDER_CONDITIONAL) || \"None\";\n    return [c + \" if \" + b + \" else \" + a, Blockly.Python.ORDER_CONDITIONAL];\n  };\n\n  Blockly.Python.loops = {};\n\n  Blockly.Python.controls_repeat_ext = function (a) {\n    var b = a.getField(\"TIMES\") ? String(parseInt(a.getFieldValue(\"TIMES\"), 10)) : Blockly.Python.valueToCode(a, \"TIMES\", Blockly.Python.ORDER_NONE) || \"0\";\n    b = Blockly.isNumber(b) ? parseInt(b, 10) : \"int(\" + b + \")\";\n    var c = Blockly.Python.statementToCode(a, \"DO\");\n    c = Blockly.Python.addLoopTrap(c, a) || Blockly.Python.PASS;\n    return \"for \" + Blockly.Python.variableDB_.getDistinctName(\"count\", Blockly.VARIABLE_CATEGORY_NAME) + \" in range(\" + b + \"):\\n\" + c;\n  };\n\n  Blockly.Python.controls_repeat = Blockly.Python.controls_repeat_ext;\n\n  Blockly.Python.controls_whileUntil = function (a) {\n    var b = \"UNTIL\" == a.getFieldValue(\"MODE\"),\n        c = Blockly.Python.valueToCode(a, \"BOOL\", b ? Blockly.Python.ORDER_LOGICAL_NOT : Blockly.Python.ORDER_NONE) || \"False\",\n        d = Blockly.Python.statementToCode(a, \"DO\");\n    d = Blockly.Python.addLoopTrap(d, a) || Blockly.Python.PASS;\n    b && (c = \"not \" + c);\n    return \"while \" + c + \":\\n\" + d;\n  };\n\n  Blockly.Python.controls_for = function (a) {\n    var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.VARIABLE_CATEGORY_NAME),\n        c = Blockly.Python.valueToCode(a, \"FROM\", Blockly.Python.ORDER_NONE) || \"0\",\n        d = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"0\",\n        e = Blockly.Python.valueToCode(a, \"BY\", Blockly.Python.ORDER_NONE) || \"1\",\n        f = Blockly.Python.statementToCode(a, \"DO\");\n    f = Blockly.Python.addLoopTrap(f, a) || Blockly.Python.PASS;\n\n    var n = \"\",\n        k = function () {\n      return Blockly.Python.provideFunction_(\"upRange\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(start, stop, step):\", \"  while start <= stop:\", \"    yield start\", \"    start += abs(step)\"]);\n    },\n        h = function () {\n      return Blockly.Python.provideFunction_(\"downRange\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(start, stop, step):\", \"  while start >= stop:\", \"    yield start\", \"    start -= abs(step)\"]);\n    };\n\n    a = function (g, l, p) {\n      return \"(\" + g + \" <= \" + l + \") and \" + k() + \"(\" + g + \", \" + l + \", \" + p + \") or \" + h() + \"(\" + g + \", \" + l + \", \" + p + \")\";\n    };\n\n    if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) c = Number(c), d = Number(d), e = Math.abs(Number(e)), 0 === c % 1 && 0 === d % 1 && 0 === e % 1 ? (c <= d ? (d++, a = 0 == c && 1 == e ? d : c + \", \" + d, 1 != e && (a += \", \" + e)) : (d--, a = c + \", \" + d + \", -\" + e), a = \"range(\" + a + \")\") : (a = c < d ? k() : h(), a += \"(\" + c + \", \" + d + \", \" + e + \")\");else {\n      var m = function (g, l) {\n        Blockly.isNumber(g) ? g = Number(g) : g.match(/^\\w+$/) ? g = \"float(\" + g + \")\" : (l = Blockly.Python.variableDB_.getDistinctName(b + l, Blockly.VARIABLE_CATEGORY_NAME), n += l + \" = float(\" + g + \")\\n\", g = l);\n        return g;\n      };\n\n      c = m(c, \"_start\");\n      d = m(d, \"_end\");\n      e = m(e, \"_inc\");\n      \"number\" == typeof c && \"number\" == typeof d ? (a = c < d ? k() : h(), a += \"(\" + c + \", \" + d + \", \" + e + \")\") : a = a(c, d, e);\n    }\n    return n += \"for \" + b + \" in \" + a + \":\\n\" + f;\n  };\n\n  Blockly.Python.controls_forEach = function (a) {\n    var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.VARIABLE_CATEGORY_NAME),\n        c = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_RELATIONAL) || \"[]\",\n        d = Blockly.Python.statementToCode(a, \"DO\");\n    d = Blockly.Python.addLoopTrap(d, a) || Blockly.Python.PASS;\n    return \"for \" + b + \" in \" + c + \":\\n\" + d;\n  };\n\n  Blockly.Python.controls_flow_statements = function (a) {\n    var b = \"\";\n    Blockly.Python.STATEMENT_PREFIX && (b += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, a));\n    Blockly.Python.STATEMENT_SUFFIX && (b += Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a));\n\n    if (Blockly.Python.STATEMENT_PREFIX) {\n      var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);\n      c && !c.suppressPrefixSuffix && (b += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, c));\n    }\n\n    switch (a.getFieldValue(\"FLOW\")) {\n      case \"BREAK\":\n        return b + \"break\\n\";\n\n      case \"CONTINUE\":\n        return b + \"continue\\n\";\n    }\n\n    throw Error(\"Unknown flow statement.\");\n  };\n\n  Blockly.Python.math = {};\n  Blockly.Python.addReservedWords(\"math,random,Number\");\n\n  Blockly.Python.math_number = function (a) {\n    a = Number(a.getFieldValue(\"NUM\"));\n\n    if (Infinity == a) {\n      a = 'float(\"inf\")';\n      var b = Blockly.Python.ORDER_FUNCTION_CALL;\n    } else -Infinity == a ? (a = '-float(\"inf\")', b = Blockly.Python.ORDER_UNARY_SIGN) : b = 0 > a ? Blockly.Python.ORDER_UNARY_SIGN : Blockly.Python.ORDER_ATOMIC;\n\n    return [a, b];\n  };\n\n  Blockly.Python.math_arithmetic = function (a) {\n    var b = {\n      ADD: [\" + \", Blockly.Python.ORDER_ADDITIVE],\n      MINUS: [\" - \", Blockly.Python.ORDER_ADDITIVE],\n      MULTIPLY: [\" * \", Blockly.Python.ORDER_MULTIPLICATIVE],\n      DIVIDE: [\" / \", Blockly.Python.ORDER_MULTIPLICATIVE],\n      POWER: [\" ** \", Blockly.Python.ORDER_EXPONENTIATION]\n    }[a.getFieldValue(\"OP\")],\n        c = b[0];\n    b = b[1];\n    var d = Blockly.Python.valueToCode(a, \"A\", b) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"B\", b) || \"0\";\n    return [d + c + a, b];\n  };\n\n  Blockly.Python.math_single = function (a) {\n    var b = a.getFieldValue(\"OP\");\n\n    if (\"NEG\" == b) {\n      var c = Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_UNARY_SIGN) || \"0\";\n      return [\"-\" + c, Blockly.Python.ORDER_UNARY_SIGN];\n    }\n\n    Blockly.Python.definitions_.import_math = \"import math\";\n    a = \"SIN\" == b || \"COS\" == b || \"TAN\" == b ? Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\" : Blockly.Python.valueToCode(a, \"NUM\", Blockly.Python.ORDER_NONE) || \"0\";\n\n    switch (b) {\n      case \"ABS\":\n        c = \"math.fabs(\" + a + \")\";\n        break;\n\n      case \"ROOT\":\n        c = \"math.sqrt(\" + a + \")\";\n        break;\n\n      case \"LN\":\n        c = \"math.log(\" + a + \")\";\n        break;\n\n      case \"LOG10\":\n        c = \"math.log10(\" + a + \")\";\n        break;\n\n      case \"EXP\":\n        c = \"math.exp(\" + a + \")\";\n        break;\n\n      case \"POW10\":\n        c = \"math.pow(10,\" + a + \")\";\n        break;\n\n      case \"ROUND\":\n        c = \"round(\" + a + \")\";\n        break;\n\n      case \"ROUNDUP\":\n        c = \"math.ceil(\" + a + \")\";\n        break;\n\n      case \"ROUNDDOWN\":\n        c = \"math.floor(\" + a + \")\";\n        break;\n\n      case \"SIN\":\n        c = \"math.sin(\" + a + \" / 180.0 * math.pi)\";\n        break;\n\n      case \"COS\":\n        c = \"math.cos(\" + a + \" / 180.0 * math.pi)\";\n        break;\n\n      case \"TAN\":\n        c = \"math.tan(\" + a + \" / 180.0 * math.pi)\";\n    }\n\n    if (c) return [c, Blockly.Python.ORDER_FUNCTION_CALL];\n\n    switch (b) {\n      case \"ASIN\":\n        c = \"math.asin(\" + a + \") / math.pi * 180\";\n        break;\n\n      case \"ACOS\":\n        c = \"math.acos(\" + a + \") / math.pi * 180\";\n        break;\n\n      case \"ATAN\":\n        c = \"math.atan(\" + a + \") / math.pi * 180\";\n        break;\n\n      default:\n        throw Error(\"Unknown math operator: \" + b);\n    }\n\n    return [c, Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.math_constant = function (a) {\n    var b = {\n      PI: [\"math.pi\", Blockly.Python.ORDER_MEMBER],\n      E: [\"math.e\", Blockly.Python.ORDER_MEMBER],\n      GOLDEN_RATIO: [\"(1 + math.sqrt(5)) / 2\", Blockly.Python.ORDER_MULTIPLICATIVE],\n      SQRT2: [\"math.sqrt(2)\", Blockly.Python.ORDER_MEMBER],\n      SQRT1_2: [\"math.sqrt(1.0 / 2)\", Blockly.Python.ORDER_MEMBER],\n      INFINITY: [\"float('inf')\", Blockly.Python.ORDER_ATOMIC]\n    };\n    a = a.getFieldValue(\"CONSTANT\");\n    \"INFINITY\" != a && (Blockly.Python.definitions_.import_math = \"import math\");\n    return b[a];\n  };\n\n  Blockly.Python.math_number_property = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"NUMBER_TO_CHECK\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\",\n        c = a.getFieldValue(\"PROPERTY\");\n    if (\"PRIME\" == c) return Blockly.Python.definitions_.import_math = \"import math\", Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\", [Blockly.Python.provideFunction_(\"math_isPrime\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(n):\", \"  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\", \"  # If n is not a number but a string, try parsing it.\", \"  if not isinstance(n, Number):\", \"    try:\", \"      n = float(n)\", \"    except:\", \"      return False\", \"  if n == 2 or n == 3:\", \"    return True\", \"  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\", \"  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\", \"    return False\", \"  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\", \"  for x in range(6, int(math.sqrt(n)) + 2, 6):\", \"    if n % (x - 1) == 0 or n % (x + 1) == 0:\", \"      return False\", \"  return True\"]) + \"(\" + b + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n\n    switch (c) {\n      case \"EVEN\":\n        var d = b + \" % 2 == 0\";\n        break;\n\n      case \"ODD\":\n        d = b + \" % 2 == 1\";\n        break;\n\n      case \"WHOLE\":\n        d = b + \" % 1 == 0\";\n        break;\n\n      case \"POSITIVE\":\n        d = b + \" > 0\";\n        break;\n\n      case \"NEGATIVE\":\n        d = b + \" < 0\";\n        break;\n\n      case \"DIVISIBLE_BY\":\n        a = Blockly.Python.valueToCode(a, \"DIVISOR\", Blockly.Python.ORDER_MULTIPLICATIVE);\n        if (!a || \"0\" == a) return [\"False\", Blockly.Python.ORDER_ATOMIC];\n        d = b + \" % \" + a + \" == 0\";\n    }\n\n    return [d, Blockly.Python.ORDER_RELATIONAL];\n  };\n\n  Blockly.Python.math_change = function (a) {\n    Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n    var b = Blockly.Python.valueToCode(a, \"DELTA\", Blockly.Python.ORDER_ADDITIVE) || \"0\";\n    a = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.VARIABLE_CATEGORY_NAME);\n    return a + \" = (\" + a + \" if isinstance(\" + a + \", Number) else 0) + \" + b + \"\\n\";\n  };\n\n  Blockly.Python.math_round = Blockly.Python.math_single;\n  Blockly.Python.math_trig = Blockly.Python.math_single;\n\n  Blockly.Python.math_on_list = function (a) {\n    var b = a.getFieldValue(\"OP\");\n    a = Blockly.Python.valueToCode(a, \"LIST\", Blockly.Python.ORDER_NONE) || \"[]\";\n\n    switch (b) {\n      case \"SUM\":\n        b = \"sum(\" + a + \")\";\n        break;\n\n      case \"MIN\":\n        b = \"min(\" + a + \")\";\n        break;\n\n      case \"MAX\":\n        b = \"max(\" + a + \")\";\n        break;\n\n      case \"AVERAGE\":\n        Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n        b = Blockly.Python.provideFunction_(\"math_mean\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(myList):\", \"  localList = [e for e in myList if isinstance(e, Number)]\", \"  if not localList: return\", \"  return float(sum(localList)) / len(localList)\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MEDIAN\":\n        Blockly.Python.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n        b = Blockly.Python.provideFunction_(\"math_median\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(myList):\", \"  localList = sorted([e for e in myList if isinstance(e, Number)])\", \"  if not localList: return\", \"  if len(localList) % 2 == 0:\", \"    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\", \"  else:\", \"    return localList[(len(localList) - 1) // 2]\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"MODE\":\n        b = Blockly.Python.provideFunction_(\"math_modes\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(some_list):\", \"  modes = []\", \"  # Using a lists of [item, count] to keep count rather than dict\", '  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.', \"  counts = []\", \"  maxCount = 1\", \"  for item in some_list:\", \"    found = False\", \"    for count in counts:\", \"      if count[0] == item:\", \"        count[1] += 1\", \"        maxCount = max(maxCount, count[1])\", \"        found = True\", \"    if not found:\", \"      counts.append([item, 1])\", \"  for counted_item, item_count in counts:\", \"    if item_count == maxCount:\", \"      modes.append(counted_item)\", \"  return modes\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"STD_DEV\":\n        Blockly.Python.definitions_.import_math = \"import math\";\n        b = Blockly.Python.provideFunction_(\"math_standard_deviation\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(numbers):\", \"  n = len(numbers)\", \"  if n == 0: return\", \"  mean = float(sum(numbers)) / n\", \"  variance = sum((x - mean) ** 2 for x in numbers) / n\", \"  return math.sqrt(variance)\"]);\n        b = b + \"(\" + a + \")\";\n        break;\n\n      case \"RANDOM\":\n        Blockly.Python.definitions_.import_random = \"import random\";\n        b = \"random.choice(\" + a + \")\";\n        break;\n\n      default:\n        throw Error(\"Unknown operator: \" + b);\n    }\n\n    return [b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_modulo = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"DIVIDEND\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"DIVISOR\", Blockly.Python.ORDER_MULTIPLICATIVE) || \"0\";\n    return [b + \" % \" + a, Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.math_constrain = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"0\",\n        c = Blockly.Python.valueToCode(a, \"LOW\", Blockly.Python.ORDER_NONE) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"HIGH\", Blockly.Python.ORDER_NONE) || \"float('inf')\";\n    return [\"min(max(\" + b + \", \" + c + \"), \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_random_int = function (a) {\n    Blockly.Python.definitions_.import_random = \"import random\";\n    var b = Blockly.Python.valueToCode(a, \"FROM\", Blockly.Python.ORDER_NONE) || \"0\";\n    a = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"0\";\n    return [\"random.randint(\" + b + \", \" + a + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_random_float = function (a) {\n    Blockly.Python.definitions_.import_random = \"import random\";\n    return [\"random.random()\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.math_atan2 = function (a) {\n    Blockly.Python.definitions_.import_math = \"import math\";\n    var b = Blockly.Python.valueToCode(a, \"X\", Blockly.Python.ORDER_NONE) || \"0\";\n    return [\"math.atan2(\" + (Blockly.Python.valueToCode(a, \"Y\", Blockly.Python.ORDER_NONE) || \"0\") + \", \" + b + \") / math.pi * 180\", Blockly.Python.ORDER_MULTIPLICATIVE];\n  };\n\n  Blockly.Python.procedures = {};\n\n  Blockly.Python.procedures_defreturn = function (a) {\n    for (var b = [], c, d = a.workspace, e = Blockly.Variables.allUsedVarModels(d) || [], f = 0; c = e[f]; f++) c = c.name, -1 == a.getVars().indexOf(c) && b.push(Blockly.Python.variableDB_.getName(c, Blockly.VARIABLE_CATEGORY_NAME));\n\n    e = Blockly.Variables.allDeveloperVariables(d);\n\n    for (f = 0; f < e.length; f++) b.push(Blockly.Python.variableDB_.getName(e[f], Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n\n    b = b.length ? Blockly.Python.INDENT + \"global \" + b.join(\", \") + \"\\n\" : \"\";\n    d = Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.PROCEDURE_CATEGORY_NAME);\n    c = \"\";\n    Blockly.Python.STATEMENT_PREFIX && (c += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, a));\n    Blockly.Python.STATEMENT_SUFFIX && (c += Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a));\n    c && (c = Blockly.Python.prefixLines(c, Blockly.Python.INDENT));\n    var n = \"\";\n    Blockly.Python.INFINITE_LOOP_TRAP && (n = Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.INFINITE_LOOP_TRAP, a), Blockly.Python.INDENT));\n    var k = Blockly.Python.statementToCode(a, \"STACK\"),\n        h = Blockly.Python.valueToCode(a, \"RETURN\", Blockly.Python.ORDER_NONE) || \"\",\n        m = \"\";\n    k && h && (m = c);\n    h ? h = Blockly.Python.INDENT + \"return \" + h + \"\\n\" : k || (k = Blockly.Python.PASS);\n    var g = [];\n    e = a.getVars();\n\n    for (f = 0; f < e.length; f++) g[f] = Blockly.Python.variableDB_.getName(e[f], Blockly.VARIABLE_CATEGORY_NAME);\n\n    b = \"def \" + d + \"(\" + g.join(\", \") + \"):\\n\" + b + c + n + k + m + h;\n    b = Blockly.Python.scrub_(a, b);\n    Blockly.Python.definitions_[\"%\" + d] = b;\n    return null;\n  };\n\n  Blockly.Python.procedures_defnoreturn = Blockly.Python.procedures_defreturn;\n\n  Blockly.Python.procedures_callreturn = function (a) {\n    for (var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"), Blockly.PROCEDURE_CATEGORY_NAME), c = [], d = a.getVars(), e = 0; e < d.length; e++) c[e] = Blockly.Python.valueToCode(a, \"ARG\" + e, Blockly.Python.ORDER_NONE) || \"None\";\n\n    return [b + \"(\" + c.join(\", \") + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.procedures_callnoreturn = function (a) {\n    return Blockly.Python.procedures_callreturn(a)[0] + \"\\n\";\n  };\n\n  Blockly.Python.procedures_ifreturn = function (a) {\n    var b = \"if \" + (Blockly.Python.valueToCode(a, \"CONDITION\", Blockly.Python.ORDER_NONE) || \"False\") + \":\\n\";\n    Blockly.Python.STATEMENT_SUFFIX && (b += Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, a), Blockly.Python.INDENT));\n    a.hasReturnValue_ ? (a = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"None\", b += Blockly.Python.INDENT + \"return \" + a + \"\\n\") : b += Blockly.Python.INDENT + \"return\\n\";\n    return b;\n  };\n\n  Blockly.Python.texts = {};\n\n  Blockly.Python.text = function (a) {\n    return [Blockly.Python.quote_(a.getFieldValue(\"TEXT\")), Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.text_multiline = function (a) {\n    return [Blockly.Python.multiline_quote_(a.getFieldValue(\"TEXT\")), Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.text.forceString_ = function (a) {\n    return Blockly.Python.text.forceString_.strRegExp.test(a) ? a : \"str(\" + a + \")\";\n  };\n\n  Blockly.Python.text.forceString_.strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n  Blockly.Python.text_join = function (a) {\n    switch (a.itemCount_) {\n      case 0:\n        return [\"''\", Blockly.Python.ORDER_ATOMIC];\n\n      case 1:\n        return a = Blockly.Python.valueToCode(a, \"ADD0\", Blockly.Python.ORDER_NONE) || \"''\", a = Blockly.Python.text.forceString_(a), [a, Blockly.Python.ORDER_FUNCTION_CALL];\n\n      case 2:\n        var b = Blockly.Python.valueToCode(a, \"ADD0\", Blockly.Python.ORDER_NONE) || \"''\";\n        a = Blockly.Python.valueToCode(a, \"ADD1\", Blockly.Python.ORDER_NONE) || \"''\";\n        a = Blockly.Python.text.forceString_(b) + \" + \" + Blockly.Python.text.forceString_(a);\n        return [a, Blockly.Python.ORDER_ADDITIVE];\n\n      default:\n        b = [];\n\n        for (var c = 0; c < a.itemCount_; c++) b[c] = Blockly.Python.valueToCode(a, \"ADD\" + c, Blockly.Python.ORDER_NONE) || \"''\";\n\n        a = Blockly.Python.variableDB_.getDistinctName(\"x\", Blockly.VARIABLE_CATEGORY_NAME);\n        a = \"''.join([str(\" + a + \") for \" + a + \" in [\" + b.join(\", \") + \"]])\";\n        return [a, Blockly.Python.ORDER_FUNCTION_CALL];\n    }\n  };\n\n  Blockly.Python.text_append = function (a) {\n    var b = Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.VARIABLE_CATEGORY_NAME);\n    a = Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_NONE) || \"''\";\n    return b + \" = str(\" + b + \") + \" + Blockly.Python.text.forceString_(a) + \"\\n\";\n  };\n\n  Blockly.Python.text_length = function (a) {\n    return [\"len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"''\") + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_isEmpty = function (a) {\n    return [\"not len(\" + (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"''\") + \")\", Blockly.Python.ORDER_LOGICAL_NOT];\n  };\n\n  Blockly.Python.text_indexOf = function (a) {\n    var b = \"FIRST\" == a.getFieldValue(\"END\") ? \"find\" : \"rfind\",\n        c = Blockly.Python.valueToCode(a, \"FIND\", Blockly.Python.ORDER_NONE) || \"''\";\n    b = (Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_MEMBER) || \"''\") + \".\" + b + \"(\" + c + \")\";\n    return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Blockly.Python.ORDER_ADDITIVE] : [b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_charAt = function (a) {\n    var b = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        c = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_MEMBER) || \"''\";\n\n    switch (b) {\n      case \"FIRST\":\n        return [c + \"[0]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"LAST\":\n        return [c + \"[-1]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"FROM_START\":\n        return a = Blockly.Python.getAdjustedInt(a, \"AT\"), [c + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"FROM_END\":\n        return a = Blockly.Python.getAdjustedInt(a, \"AT\", 1, !0), [c + \"[\" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n\n      case \"RANDOM\":\n        return Blockly.Python.definitions_.import_random = \"import random\", [Blockly.Python.provideFunction_(\"text_random_letter\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(text):\", \"  x = int(random.random() * len(text))\", \"  return text[x];\"]) + \"(\" + c + \")\", Blockly.Python.ORDER_FUNCTION_CALL];\n    }\n\n    throw Error(\"Unhandled option (text_charAt).\");\n  };\n\n  Blockly.Python.text_getSubstring = function (a) {\n    var b = a.getFieldValue(\"WHERE1\"),\n        c = a.getFieldValue(\"WHERE2\"),\n        d = Blockly.Python.valueToCode(a, \"STRING\", Blockly.Python.ORDER_MEMBER) || \"''\";\n\n    switch (b) {\n      case \"FROM_START\":\n        b = Blockly.Python.getAdjustedInt(a, \"AT1\");\n        \"0\" == b && (b = \"\");\n        break;\n\n      case \"FROM_END\":\n        b = Blockly.Python.getAdjustedInt(a, \"AT1\", 1, !0);\n        break;\n\n      case \"FIRST\":\n        b = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (text_getSubstring)\");\n    }\n\n    switch (c) {\n      case \"FROM_START\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 1);\n        break;\n\n      case \"FROM_END\":\n        a = Blockly.Python.getAdjustedInt(a, \"AT2\", 0, !0);\n        Blockly.isNumber(String(a)) ? \"0\" == a && (a = \"\") : (Blockly.Python.definitions_.import_sys = \"import sys\", a += \" or sys.maxsize\");\n        break;\n\n      case \"LAST\":\n        a = \"\";\n        break;\n\n      default:\n        throw Error(\"Unhandled option (text_getSubstring)\");\n    }\n\n    return [d + \"[\" + b + \" : \" + a + \"]\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.text_changeCase = function (a) {\n    var b = {\n      UPPERCASE: \".upper()\",\n      LOWERCASE: \".lower()\",\n      TITLECASE: \".title()\"\n    }[a.getFieldValue(\"CASE\")];\n    return [(Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\") + b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_trim = function (a) {\n    var b = {\n      LEFT: \".lstrip()\",\n      RIGHT: \".rstrip()\",\n      BOTH: \".strip()\"\n    }[a.getFieldValue(\"MODE\")];\n    return [(Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\") + b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_print = function (a) {\n    return \"print(\" + (Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_NONE) || \"''\") + \")\\n\";\n  };\n\n  Blockly.Python.text_prompt_ext = function (a) {\n    var b = Blockly.Python.provideFunction_(\"text_prompt\", [\"def \" + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + \"(msg):\", \"  try:\", \"    return raw_input(msg)\", \"  except NameError:\", \"    return input(msg)\"]),\n        c = a.getField(\"TEXT\") ? Blockly.Python.quote_(a.getFieldValue(\"TEXT\")) : Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_NONE) || \"''\";\n    b = b + \"(\" + c + \")\";\n    \"NUMBER\" == a.getFieldValue(\"TYPE\") && (b = \"float(\" + b + \")\");\n    return [b, Blockly.Python.ORDER_FUNCTION_CALL];\n  };\n\n  Blockly.Python.text_prompt = Blockly.Python.text_prompt_ext;\n\n  Blockly.Python.text_count = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\";\n    a = Blockly.Python.valueToCode(a, \"SUB\", Blockly.Python.ORDER_NONE) || \"''\";\n    return [b + \".count(\" + a + \")\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.text_replace = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\",\n        c = Blockly.Python.valueToCode(a, \"FROM\", Blockly.Python.ORDER_NONE) || \"''\";\n    a = Blockly.Python.valueToCode(a, \"TO\", Blockly.Python.ORDER_NONE) || \"''\";\n    return [b + \".replace(\" + c + \", \" + a + \")\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.text_reverse = function (a) {\n    return [(Blockly.Python.valueToCode(a, \"TEXT\", Blockly.Python.ORDER_MEMBER) || \"''\") + \"[::-1]\", Blockly.Python.ORDER_MEMBER];\n  };\n\n  Blockly.Python.variables = {};\n\n  Blockly.Python.variables_get = function (a) {\n    return [Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.VARIABLE_CATEGORY_NAME), Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Blockly.Python.variables_set = function (a) {\n    var b = Blockly.Python.valueToCode(a, \"VALUE\", Blockly.Python.ORDER_NONE) || \"0\";\n    return Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"), Blockly.VARIABLE_CATEGORY_NAME) + \" = \" + b + \"\\n\";\n  };\n\n  Blockly.Python.variablesDynamic = {};\n  Blockly.Python.variables_get_dynamic = Blockly.Python.variables_get;\n  Blockly.Python.variables_set_dynamic = Blockly.Python.variables_set;\n  return Blockly.Python;\n});","map":{"version":3,"sources":["generators/python.js","generators/python/colour.js","generators/python/lists.js","generators/python/logic.js","generators/python/loops.js","generators/python/math.js","generators/python/procedures.js","generators/python/text.js","generators/python/variables.js","generators/python/variables_dynamic.js"],"names":["Blockly","Blockly.Python.init","Object","workspace","defvars","devVarList","i","variables","Blockly.Python.finish","imports","definitions","def","definitions_","functionNames_","Blockly.Python.scrubNakedValue","line","Blockly.Python.quote_","string","quote","Blockly.Python.multiline_quote_","Blockly.Python.scrub_","commentCode","block","comment","childBlock","nextBlock","nextCode","opt_thisOnly","Blockly.Python.getAdjustedInt","delta","opt_delta","defaultAtIndex","ORDER_NONE","at","parseInt","opt_negate","code","functionName","r","g","b","colour1","colour2","ratio","elements","Array","item","times","list","errorIndex","firstIndexAdjustment","lastIndexAdjustment","mode","where","listOrder","ORDER_MEMBER","Error","value","listVar","xVar","where1","where2","at1","at2","String","Python","type","reverse","sortFunctionName","value_input","value_delim","n","PASS","branchCode","STATEMENT_SUFFIX","OPERATORS","operator","order","argument0","argument1","defaultArgument","value_if","value_then","value_else","repeats","branch","until","variable0","increment","defineUpRange","defineDownRange","generateUpDownRange","Number","Math","range","scrub","arg","varName","startVar","endVar","incVar","xfix","loop","Infinity","ORDER_ATOMIC","tuple","CONSTANTS","constant","number_to_check","dropdown_property","divisor","func","argument2","globals","variable","name","funcName","xfix1","loopTrap","returnValue","xfix2","args","Blockly.Python.text.forceString_","element","element0","element1","tempVar","substring","text","msg","sub","from","to"],"mappings":";;;;;;;;;;;;;;;;;;;AAsBAA,EAAAA,OAAAA,CAAAA,MAAAA,GAAiB,IAAIA,OAAJ,CAAA,SAAA,CAAA,QAAA,CAAjBA;AASAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,u5DAAAA;SA8CA,CAAA,M,CAAA,Y,GAA8B,C;AAC9BA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,GAAkC,CAAlCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,uBAAAA,GAAyC,CAAzCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,GAA8B,GAA9BA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,mBAAAA,GAAqC,GAArCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,oBAAAA,GAAsC,CAAtCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,GAAkC,CAAlCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAmC,CAAnCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,oBAAAA,GAAsC,CAAtCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,GAAgC,CAAhCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,mBAAAA,GAAqC,CAArCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAmC,CAAnCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAmC,CAAnCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,GAAkC,EAAlCA;SACA,CAAA,M,CAAA,gB,GAAkC,E;AAElCA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAmC,EAAnCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAmC,EAAnCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,GAAkC,EAAlCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAmC,EAAnCA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,GAA8B,EAA9BA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,UAAAA,GAA4B,EAA5BA;SAMA,CAAA,M,CAAA,e,GAAiC,CAG/B,CAACA,OAAD,CAAA,MAACA,CAAD,mBAAA,EAAqCA,OAArC,CAAA,MAAqCA,CAHN,YAG/B,CAH+B,EAK/B,CAACA,OAAD,CAAA,MAACA,CAAD,mBAAA,EAAqCA,OAArC,CAAA,MAAqCA,CALN,mBAK/B,CAL+B,EAU/B,CAACA,OAAD,CAAA,MAACA,CAAD,YAAA,EAA8BA,OAA9B,CAAA,MAA8BA,CAVC,YAU/B,CAV+B,EAa/B,CAACA,OAAD,CAAA,MAACA,CAAD,YAAA,EAA8BA,OAA9B,CAAA,MAA8BA,CAbC,mBAa/B,CAb+B,EAgB/B,CAACA,OAAD,CAAA,MAACA,CAAD,iBAAA,EAAmCA,OAAnC,CAAA,MAAmCA,CAhBJ,iBAgB/B,CAhB+B,EAkB/B,CAACA,OAAD,CAAA,MAACA,CAAD,iBAAA,EAAmCA,OAAnC,CAAA,MAAmCA,CAlBJ,iBAkB/B,CAlB+B,EAoB/B,CAACA,OAAD,CAAA,MAACA,CAAD,gBAAA,EAAkCA,OAAlC,CAAA,MAAkCA,CApBH,gBAoB/B,CApB+B,C;;SA4BjC,CAAA,M,CAAA,I,GAAsBC,UAAQ,CAARA,EAAoB;AAIxCD,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,GAAAA,KAAAA,MAAAA,GAAoC,QAApCA;AAEAA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,GAA8BE,MAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAA9BF;AAGAA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,GAAgCE,MAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAhCF;AAEKA,IAAAA,OAAL,CAAA,MAAKA,CAAL,WAAKA,GAIHA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAJF,KAIEA,EAJGA,GACHA,OADF,CAAA,MACEA,CADF,WACEA,GACI,IAAIA,OAAJ,CAAA,KAAA,CAAkBA,OAAlB,CAAA,MAAkBA,CAAlB,eAAA,CAFDA;AAOLA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,cAAAA,CAA0CG,CAAAA,CAA1CH,cAA0CG,EAA1CH;;AAKA,SAHA,IAAII,CAAAA,GAAJ,EAAA,EAEIC,CAAAA,GAAaL,OAAAA,CAAAA,SAAAA,CAAAA,qBAAAA,CAFjB,CAEiBA,CAFjB,EAGSM,CAAAA,GAAT,CAAA,EAAgBA,CAAhB,GAAoBD,CAApB,CAAA,MAAA,EAAuCC,CAAvC,EAAA,EACE,CAAA,CAAA,IAAA,CAAaN,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCK,CAAAA,CAAnCL,CAAmCK,CAAnCL,EACTA,OADSA,CAAAA,KACTA,CADJ,uBAAaA,IAAb,SAAA;;AAKEO,IAAAA,CAAAA,GAAYP,OAAAA,CAAAA,SAAAA,CAAAA,gBAAAA,CAAAA,CAAAA,CAAZO;;AACJ,SAASD,CAAT,GAAA,CAAA,EAAgBA,CAAhB,GAAoBC,CAApB,CAAA,MAAA,EAAsCD,CAAtC,EAAA,EACEF,CAAAA,CAAAA,IAAAA,CAAaJ,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCO,CAAAA,CAAAA,CAAAA,CAAAA,CAAnCP,KAAmCO,EAAnCP,EACTA,OADSA,CAAbI,sBAAaJ,IAAbI,SAAAA;;AAIFJ,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,SAAAA,GAA2CI,CAAAA,CAAAA,IAAAA,CAnCH,IAmCGA,CAA3CJ;AAQF,G;;SAAA,CAAA,M,CAAA,M,GAAwBQ,UAAQ,CAARA,EAAe;AAErC,QAAIC,CAAAA,GAAJ,EAAA;AAAA,QACIC,CAAAA,GADJ,EAAA;AAAA,QAEA,CAFA;;AAEA,SAAA,CAAA,IAAiBV,OAAjB,CAAA,MAAiBA,CAAjB,YAAA,EAA8C;AAC5C,UAAIW,CAAAA,GAAMX,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAV;AACIW,MAAAA,CAAAA,CAAAA,KAAAA,CAAJ,+BAAIA,IACFF,CAAAA,CAAAA,IAAAA,CADF,CACEA,CADEE,GAGFD,CAAAA,CAAAA,IAAAA,CAL0C,CAK1CA,CAHEC;AAON;;AAAA,WAAOX,OAAP,CAAA,MAAOA,CAAeY,YAAtB;AACA,WAAOZ,OAAP,CAAA,MAAOA,CAAea,cAAtB;AACAb,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,KAAAA;AAEA,WAAO,CADOS,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,IAAqB,MAArBA,GAA8BC,CAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CACrC,EAAA,OAAA,CAAA,QAAA,EAAA,MAAA,EAAA,OAAA,CAAA,MAAA,EAAP,QAAO,IAjB8B,CAiBrC;AASFV,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,GAAiCc,UAAQ,CAARA,EAAe;AAC9C,WAAOC,CAAP,GAD8C,IAC9C;AASF,GAVAf;;SAUA,CAAA,M,CAAA,M,GAAwBgB,UAAQ,CAARA,EAAiB;AAEvCC,IAAAA,CAAAA,GAASA,CAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAAAA,MAAAA,EAAAA,OAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAATA;AAIA,QAAIC,CAAAA,GAAQ,GAAZ;AAC6B,KAA7B,CAA6B,KAAzBD,CAAAA,CAAAA,OAAAA,CAAJ,GAAIA,CAAyB,KACC,CAA5B,CAA4B,KAAxBA,CAAAA,CAAAA,OAAAA,CAAJ,GAAIA,CAAwB,GAC1BC,CADF,GAAA,GAA4B,GAG1BD,CAHF,GAGWA,CAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAJb,KAIaA,CAJgB;AAO7B,WAAOC,CAAP,GAAA,CAAOA,GAdgC,CAcvC;AAUFlB,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,GAAkCmB,UAAQ,CAARA,EAAiB;AACrCF,WAAAA,CAAAA,CAAAA,KAAAA,CAAAA,KAAAA,EAAAA,GAAAA,CAAwBjB,OAAxBiB,CAAAA,MAAwBjB,CAAxBiB,MAAAA,EAGL,IAHKA,CADqC,eACrCA,CAAAA;AAgBd,GAjBAjB;;SAiBA,CAAA,M,CAAA,M,GAAwBoB,UAAQ,CAARA,EAAQ,CAARA,EAAQ,CAARA,EAAoC;AAC1D,QAAIC,CAAAA,GAAc,EAAlB;;AAEA,QAAI,CAACC,CAAD,CAAJ,gBAAI,IAA2B,CAACA,CAAD,CAAA,gBAACA,CAAhC,gBAAA,EAAyE;AAEvE,UAAIC,CAAAA,GAAUD,CAAAA,CAAAA,cAAAA,EAAd;AACIC,MAAAA,CAAJ,KACEA,CAEA,GAFUvB,OAAAA,CAAAA,KAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EACNA,OADMA,CAAAA,MACNA,CADMA,YACNA,GADMA,CAAAA,CAAVuB,EAEA,CAAA,IAAevB,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAA2BuB,CAA3BvB,GAAAA,IAAAA,EAHjB,IAGiBA,CAHjB,CAAIuB;;AAOJ,WAAK,IAAIjB,CAAAA,GAAT,CAAA,EAAgBA,CAAhB,GAAoBgB,CAApB,CAAA,SAAoBA,CAApB,MAAA,EAA4ChB,CAA5C,EAAA,EACMgB,CAAAA,CAAAA,SAAAA,CAAJ,CAAIA,EAAJ,IAAIA,IAA2BtB,OAA/B,CAAA,WAAIsB,KACEE,CADN,GACmBF,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,EAAAA,UAAAA,CADnB,WACmBA,EADfA,MAGAC,CAHJ,GAGcvB,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,CAHd,CAGcA,CAHVsB,MAKED,CALN,IAKqBrB,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAhBgD,IAgBhDA,CALjBsB;AAWJG;;AAAAA,IAAAA,CAAAA,GAAYH,CAAZG,CAAAA,cAAYH,IAAwBA,CAAAA,CAAAA,cAAAA,CAAAA,WAAAA,EAApCG;AACAC,IAAAA,CAAAA,GAAWC,CAAAA,GAAAA,EAAAA,GAAoB3B,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,CAA/B0B;AACJ,WAAOL,CAAP,GAAA,CAAOA,GA3BmD,CA2B1D;AAYFrB,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,GAAgC4B,UAAQ,CAARA,EAAQ,CAARA,EAAQ,CAARA,EAAQ,CAARA,EAA6C;AACvEC,IAAAA,CAAAA,GAAQC,CAARD,IAAqB,CAArBA;AACAP,IAAAA,CAAJ,CAAA,SAAIA,CAAJ,OAAIA,CAAJ,aAAIA,IACFO,CAAAA,EADEP;AAGJ,QAAIS,CAAAA,GAAiBT,CAAAA,CAAAA,SAAAA,CAAAA,OAAAA,CAAAA,aAAAA,GAAAA,GAAAA,GAA8C,GAAnE;AAGIW,IAAAA,CAAAA,GAAKjC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAFK6B,CAAAA,GAAQ7B,OAAR6B,CAAAA,MAAQ7B,CAAR6B,cAAAA,GACV7B,OADU6B,CAAAA,MACV7B,CAAegC,UACVhC,KAAoD+B,CAAzDE;AAEAjC,IAAAA,OAAAA,CAAAA,QAAAA,CAAJ,CAAIA,KAEFiC,CACA,GADKC,QAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,GAAmBL,CAAxBI,EACIE,CAAJ,KACEF,CADF,GACO,CAJT,CAGE,CAHEjC,KASAiC,CAMF,GAPA,IAAA,CAAA,GAAA,SAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,GAAA,GAEO,IAAA,CAAA,GAAA,SAAA,CAAA,GAAA,KAAA,GACsB,CADtB,CAAA,GAAA,GAAA,GAAA,SAAA,CAAA,GAGc,GAJnBA,EAMEE,CAAJ,KACEF,CADF,GAAA,MAfF,CAeE,CAfEjC;AAmBJ,WA7B2E,CA6B3E;GA7BFA;;ACvR6B,EAAA,OAAA,CAAA,MAAA,CAAA,MAAA,GAAA,EAAA;;AAK7BA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,aAAAA,GAAkC,UAAQ,CAAR,EAAgB;AAGhD,WAAO,CADIA,OAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAsBsB,CAAAA,CAAAA,aAAAA,CAAtBtB,QAAsBsB,CAAtBtB,CACJ,EAAOA,OAAP,CAAA,MAAOA,CAHkC,YAGzC,CAAP;AAGFA,GANAA;;AAMAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,aAAAA,GAAkC,UAAQ,CAAR,EAAgB;AAEhDA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,aAAAA,GAA+C,eAA/CA;AAEA,WAAO,CADIoC,wCACJ,EAAOpC,OAAP,CAAA,MAAOA,CAJkC,mBAIzC,CAAP;AAGF,GAPAA;;SAOA,CAAA,M,CAAA,U,GAA+B,UAAQ,CAAR,EAAgB;AAE7C,QAAIqC,CAAAA,GAAerC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,YAAAA,EAEf,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,YAAA,EAAA,yCAAA,EAAA,yCAAA,EAAA,yCAAA,EAFJ,sCAEI,CAFeA,CAAnB;AAAA,QAOIsC,CAAAA,GAAItC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAC2BA,OAD3BA,CAAAA,MAC2BA,CAD/BsC,UAAItC,KAPR,CAAA;AAAA,QASIuC,CAAAA,GAAIvC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EAC2BA,OAD3BA,CAAAA,MAC2BA,CAD/BuC,UAAIvC,KACyD,CAVjE;AAWIwC,IAAAA,CAAAA,GAAIxC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAC2BA,OAD3BA,CAAAA,MAC2BA,CAD/BwC,UAAIxC,KACyD,CAD7DwC;AAGJ,WAAO,CADIH,CACJ,GADmB,GAAfA,GAAqBC,CAArBD,GAAyB,IAAzBA,GAAgCE,CAAhCF,GAAoC,IAApCA,GAA2CG,CAA3CH,GAA+C,GACnD,EAAOrC,OAAP,CAAA,MAAOA,CAhB+B,mBAgBtC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,Y,GAAiC,UAAQ,CAAR,EAAgB;AAE/C,QAAIqC,CAAAA,GAAe,OAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,cAAA,EAEf,CAAA,SAAUrC,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,4BAAA,EAAA,yDAAA,EAAA,yDAAA,EAAA,yDAAA,EAAA,iCAAA,EAAA,4CAAA,EAAA,4CAAA,EAAA,4CAAA,EAFJ,sCAEI,CAFe,CAAnB;AAAA,QAYIyC,CAAAA,GAAUzC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EACVA,OADUA,CAAAA,MACVA,CADAyC,UAAUzC,KAZd,WAAA;AAAA,QAcI0C,CAAAA,GAAU1C,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EACVA,OADUA,CAAAA,MACVA,CADA0C,UAAU1C,KACoB,WAflC;AAgBI2C,IAAAA,CAAAA,GAAQ3C,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACRA,OADQA,CAAAA,MACRA,CADA2C,UAAQ3C,KACsB,CAD9B2C;AAGJ,WAAO,CADIN,CACJ,GADmB,GAAfA,GAAqBI,CAArBJ,GAA+B,IAA/BA,GAAsCK,CAAtCL,GAAgD,IAAhDA,GAAuDM,CAAvDN,GAA+D,GACnE,EAAOrC,OAAP,CAAA,MAAOA,CArBiC,mBAqBxC,CAAP;;;AC1D2B,EAAA,OAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;;AAK7BA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,kBAAAA,GAAuC,UAAQ,CAAR,EAAgB;AAErD,WAAO,CAAA,IAAA,EAAOA,OAAP,CAAA,MAAOA,CAFuC,YAE9C,CAAP;AAGFA,GALAA;;AAKAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAsC,UAAQ,CAAR,EAAgB;AAGpD,SADA,IAAI4C,CAAAA,GAAeC,KAAJ,CAAUvB,CAAV,CAAf,UAAe,CAAf,EACShB,CAAAA,GAAT,CAAA,EAAgBA,CAAhB,GAAoBgB,CAApB,CAAA,UAAA,EAAsChB,CAAtC,EAAA,EACEsC,CAAAA,CAAAA,CAAAA,CAAAA,GAAc5C,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,EACVA,OADUA,CAAAA,MACVA,CADJ4C,UAAc5C,KACoB,MADlC4C;;AAIF,WAAO,CADI,MAAMA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAN,GAA4B,GAChC,EAAO5C,OAAP,CAAA,MAAOA,CARsC,YAQ7C,CAAP;AAGF,GAXAA;;SAWA,CAAA,M,CAAA,Y,GAAiC,UAAQ,CAAR,EAAgB;AAE/C,QAAI8C,CAAAA,GAAO9C,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADA8C,UAAO9C,KACuB,MADlC;AAEI+C,IAAAA,CAAAA,GAAQ/C,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EACRA,OADQA,CAAAA,MACRA,CADA+C,oBAAQ/C,KACgC,GADxC+C;AAGJ,WAAO,CADI,MAAMD,CAAN,GAAa,MAAb,GAAsBC,CAC1B,EAAO/C,OAAP,CAAA,MAAOA,CAPiC,oBAOxC,CAAP;AAGFA,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,GAAiC,UAAQ,CAAR,EAAgB;AAI/C,WAAO,CAAA,UAFIA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,UAAAA,KACuB,IAC3B,IAAA,GAAA,EAAsBA,OAAtB,CAAA,MAAsBA,CAJkB,mBAIxC,CAAP;AAGF,GAPAA;;SAOA,CAAA,M,CAAA,a,GAAkC,UAAQ,CAAR,EAAgB;AAKhD,WAAO,CADI,cAFAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,UAAAA,KACuB,IACvB,IAAoB,GACxB,EAAOA,OAAP,CAAA,MAAOA,CALkC,iBAKzC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,a,GAAkC,UAAQ,CAAR,EAAgB;AAEhD,QAAI8C,CAAAA,GAAO9C,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADA8C,UAAO9C,KAAX,IAAA;AAAA,QAEIgD,CAAAA,GAAOhD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgD,UAAOhD,KACuB,IAHlC;AAIA,QAAIsB,CAAJ,CAAA,SAAIA,CAAJ,OAAIA,CAAJ,aAAA,EACE,IAAI2B,CAAAA,GAAJ,IAAA;AAAA,QACIC,CAAAA,GADJ,MAAA;AAAA,QAEIC,CAAAA,GAHN,EACE,CADF,KAKMF,CAEJ,GAFiB,KAAbA,EACAC,CACJ,GAD2B,EADvBD,EAEAE,CAAJ,GAA0B,MAFtBF;AAIN,QAAA,WAAI3B,CAAAA,CAAAA,aAAAA,CAAJ,KAAIA,CAAJ,EACMe,OAAAA,CAQG,GARYrC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,aAAAA,EAEf,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,kBAAA,EAAA,uCAAA,CAAA,EAAA,sBAAA,CAAA,EAFeA,gBAEf,CAFeA,CAAfqC,EAQG,CADIA,CACJ,GADmB,GAAfA,GAAqBW,CAArBX,GAA4B,IAA5BA,GAAmCS,CAAnCT,GAA0C,GAC9C,EAAOrC,OAAP,CAAA,MAAOA,CAAP,mBAAA,CARHqC;AAUFA,IAAAA,CAAJ,GAAmBrC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,YAAAA,EAEf,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,kBAAA,EAAA,4DAAA,CAAA,EAAA,sBAAA,CAAA,EAFeA,gBAEf,CAFeA,CAAfqC;AAQJ,WAAO,CADIA,CACJ,GADmB,GAAfA,GAAqBW,CAArBX,GAA4B,IAA5BA,GAAmCS,CAAnCT,GAA0C,GAC9C,EAAOrC,OAAP,CAAA,MAAOA,CAlCkC,mBAkCzC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,c,GAAmC,UAAQ,CAAR,EAAgB;AAGjD,QAAIoD,CAAAA,GAAO9B,CAAAA,CAAAA,aAAAA,CAAP8B,MAAO9B,KAAX,KAAA;AAAA,QACI+B,CAAAA,GAAQ/B,CAAAA,CAAAA,aAAAA,CAAR+B,OAAQ/B,KADZ,YAAA;AAAA,QAII0B,CAAAA,GAAOhD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EAFKsD,YAAAA,CAAAA,GAAsBtD,OAAtBsD,CAAAA,MAAsBtD,CAAtBsD,UAAAA,GACZtD,OADYsD,CAAAA,MACZtD,CAAeuD,YACRvD,KAAyD,IAJpE;;AAMA,YAAA,CAAA;AACE,WAAA,OAAA;AACE,YAAA,SAAA,CAAA,EAEE,OAAO,CADIgD,CACJ,GADW,KACX,EAAOhD,OAAP,CAAA,MAAOA,CAAP,YAAA,CAAP;AACK,YAAA,gBAAA,CAAA,EAEL,OAAO,CADIgD,CACJ,GADW,SACX,EAAOhD,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAAP;AACK,YAAA,YAAA,CAAA,EACL,OAAOgD,CAAP,GAAc,WAAd;AAEF;;AACF,WAAA,MAAA;AACE,YAAA,SAAA,CAAA,EAEE,OAAO,CADIA,CACJ,GADW,MACX,EAAOhD,OAAP,CAAA,MAAOA,CAAP,YAAA,CAAP;AACK,YAAA,gBAAA,CAAA,EAEL,OAAO,CADIgD,CACJ,GADW,QACX,EAAOhD,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAAP;AACK,YAAA,YAAA,CAAA,EACL,OAAOgD,CAAP,GAAc,UAAd;AAEF;;AACF,WAAA,YAAA;AACMf,QAAAA,CAAAA,GAAKjC,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAALiC;AACJ,YAAA,SAAA,CAAA,EAEE,OAAO,CADIe,CACJ,GADW,GAAPA,GAAaf,CAAbe,GAAkB,GACtB,EAAOhD,OAAP,CAAA,MAAOA,CAAP,YAAA,CAAP;AACK,YAAA,gBAAA,CAAA,EAEL,OAAO,CADIgD,CACJ,GADW,OAAPA,GAAiBf,CAAjBe,GAAsB,GAC1B,EAAOhD,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAAP;AACK,YAAA,YAAA,CAAA,EACL,OAAOgD,CAAP,GAAA,OAAOA,GAAP,CAAOA,GAAsB,KAA7B;AAEF;;AACF,WAAA,UAAA;AACMf,QAAAA,CAAJ,GAASjC,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,EAA8C,CAA9CA,CAAAA,CAALiC;AACJ,YAAA,SAAA,CAAA,EAEE,OAAO,CADIe,CACJ,GADW,GAAPA,GAAaf,CAAbe,GAAkB,GACtB,EAAOhD,OAAP,CAAA,MAAOA,CAAP,YAAA,CAAP;AACK,YAAA,gBAAA,CAAA,EAEL,OAAO,CADIgD,CACJ,GADW,OAAPA,GAAiBf,CAAjBe,GAAsB,GAC1B,EAAOhD,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAAP;AACK,YAAA,YAAA,CAAA,EACL,OAAOgD,CAAP,GAAA,OAAOA,GAAP,CAAOA,GAAsB,KAA7B;AAEF;;AACF,WAAA,QAAA;AACEhD,QAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,aAAAA,GAA+C,eAA/CA;AACA,YAAA,SAAA,CAAA,EAEE,OAAO,CADA,mBAAmBgD,CAAnB,GAA0B,GAC1B,EAAOhD,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAAP;AAOAoC,QAAAA,CAAAA,GALmBpC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,0BAAAA,EAEf,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,WAAA,EAAA,0CAAA,EAFeA,wBAEf,CAFeA,IAKnBoC,GALmBpC,GAKnBoC,CALmBpC,GAKgB,GAAnCoC;AACA,YAAA,gBAAA,CAAA,EACE,OAAO,CAAA,CAAA,EAAOpC,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAAP;AACK,YAAA,YAAA,CAAA,EACL,OAAOoC,CAAP,GA9DR,IA8DQ;AA9DR;;AAmEA,UAAMoB,KAAAA,CA5E2C,yCA4E3CA,CAAN;AAGF,G;;SAAA,CAAA,M,CAAA,c,GAAmC,UAAQ,CAAR,EAAgB;AAGjD,QAAIR,CAAAA,GAAOhD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgD,YAAOhD,KAAX,IAAA;AAAA,QAEIoD,CAAAA,GAAO9B,CAAAA,CAAAA,aAAAA,CAAP8B,MAAO9B,KAFX,KAAA;AAAA,QAGI+B,CAAAA,GAAQ/B,CAAAA,CAAAA,aAAAA,CAAR+B,OAAQ/B,KAHZ,YAAA;AAAA,QAIImC,CAAAA,GAAQzD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EACRA,OADQA,CAAAA,MACRA,CADAyD,UAAQzD,KACsB,MALlC;;AAmBA,YAAA,CAAA;AACE,WAAA,OAAA;AACE,YAAA,SAAA,CAAA,EACE,OAAOgD,CAAP,GAAA,QAAOA,GAAP,CAAOA,GAA0B,IAAjC;AACK,YAAA,YAAA,CAAA,EACL,OAAOA,CAAP,GAAA,aAAOA,GAAP,CAAOA,GAA+B,KAAtC;AAEF;;AACF,WAAA,MAAA;AACI,YAAA,SAAA,CAAA,EACE,OAAOA,CAAP,GAAA,SAAOA,GAAP,CAAOA,GAA2B,IAAlC;AACK,YAAA,YAAA,CAAA,EACL,OAAOA,CAAP,GAAA,UAAOA,GAAP,CAAOA,GAA4B,KAAnC;AAEJ;;AACF,WAAA,YAAA;AACMf,QAAAA,CAAAA,GAAK,OAAA,CAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA,CAALA;AACF,YAAA,SAAA,CAAA,EACE,OAAOe,CAAP,GAAA,GAAOA,GAAP,CAAOA,GAAP,MAAOA,GAAP,CAAOA,GAAmC,IAA1C;AACK,YAAA,YAAA,CAAA,EACL,OAAOA,CAAP,GAAA,UAAOA,GAAP,CAAOA,GAAP,IAAOA,GAAP,CAAOA,GAAwC,KAA/C;AAEJ;;AACF,WAAA,UAAA;AACMf,QAAAA,CAAJ,GAASjC,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,EAA8C,CAA9CA,CAAAA,CAALiC;AACF,YAAA,SAAA,CAAA,EACE,OAAOe,CAAP,GAAA,GAAOA,GAAP,CAAOA,GAAP,MAAOA,GAAP,CAAOA,GAAmC,IAA1C;AACK,YAAA,YAAA,CAAA,EACL,OAAOA,CAAP,GAAA,UAAOA,GAAP,CAAOA,GAAP,IAAOA,GAAP,CAAOA,GAAwC,KAA/C;AAEJ;;AACF,WAAA,QAAA;AACIhD,QAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,aAAAA,GA1CAgD,eA0CAhD;AA1CAgD,QAAAA,CAAAA,CAAAA,KAAAA,CAAJ,OAAIA,IACF,CADF,GAAA,EAAIA,IAGAU,CAIJ,GAJc1D,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,eAAAA,CAAAA,UAAAA,EACEA,OADFA,CAAAA,sBAAAA,CAAV0D,EAEAtB,CAEJ,GAFWsB,CAEX,GAFqB,KAAVA,GAAkBV,CAAlBU,GAAyB,IAFhCA,EAGJV,CACA,GADOU,CAHHA,EAIJ,CAAA,GAPA,CAAIV;AA4CIW,QAAAA,CAAAA,GAAO,OAAA,CAAA,MAAA,CAAA,WAAA,CAAA,eAAA,CAAA,OAAA,EACE3D,OADF,CAAA,sBAAA,CAAP2D;AAEJvB,QAAAA,CAAAA,IAAQuB,CAARvB,GAAAA,+BAAQuB,GAARvB,CAAQuB,GAAgD,MAAxDvB;AACA,YAAA,SAAA,CAAA,EACEA,OAAAA,CACA,IADQY,CACR,GADe,GAAPA,GAAaW,CAAbX,GAAoB,MAApBA,GAA6BS,CAA7BT,GAAqC,IAC7C,CADAZ;AAEK,YAAA,YAAA,CAAA,EACLA,OAAAA,CACA,IADQY,CACR,GADe,UAAPA,GAAoBW,CAApBX,GAA2B,IAA3BA,GAAkCS,CAAlCT,GAzChB,KA0CQ,CADAZ;AAzCR;;AA8CA,UAAMoB,KAAAA,CApE2C,yCAoE3CA,CAAN;AAGF,G;;SAAA,CAAA,M,CAAA,gB,GAAqC,UAAQ,CAAR,EAAgB;AAEnD,QAAIR,CAAAA,GAAOhD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgD,YAAOhD,KAAX,IAAA;AAAA,QAEI4D,CAAAA,GAAStC,CAAAA,CAAAA,aAAAA,CAFb,QAEaA,CAFb;AAAA,QAGIuC,CAAAA,GAASvC,CAAAA,CAAAA,aAAAA,CAAAA,QAAAA,CAHb;;AAIA,YAAA,CAAA;AACE,WAAA,YAAA;AACMwC,QAAAA,CAAAA,GAAM9D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAN8D;AACJ,eAAA,CAAA,KACEA,CADF,GAAA,EAAA;AAGA;;AACF,WAAA,UAAA;AACMA,QAAAA,CAAJ,GAAU9D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAA+C,CAA/CA,CAAAA,CAAN8D;AACJ;;AACF,WAAA,OAAA;AACMA,QAAAA,CAAJ,GAAU,EAANA;AACJ;;AACF;AACE,cAAMN,KAAAA,CAdV,qCAcUA,CAAN;AAdJ;;AAgBA,YAAA,CAAA;AACE,WAAA,YAAA;AACMO,QAAAA,CAAAA,GAAM/D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,CAAN+D;AACJ;;AACF,WAAA,UAAA;AACMA,QAAAA,CAAJ,GAAU/D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAA+C,CAA/CA,CAAAA,CAAN+D;AAGC/D,QAAAA,OAAAA,CAAAA,QAAAA,CAAiBgE,MAAAA,CAAtB,CAAsBA,CAAjBhE,IAAL,OAAA,CAAA,KAIE+D,CAJF,GAAA,EAAA,CAAK/D,IACHA,OACA,CADQiE,MAARjE,CAAeY,YAAfZ,CAA4B,UAA5BA,GAA4C,YAA5CA,EACA,CAAA,IAFF,iBAAKA;AAML;;AACF,WAAA,MAAA;AACM+D,QAAAA,CAAJ,GAAU,EAANA;AACJ;;AACF;AACE,cAAMP,KAAAA,CAnBV,qCAmBUA,CAAN;AAnBJ;;AAsBA,WAAO,CADIR,CACJ,GADW,GAAPA,GAAac,CAAbd,GAAmB,KAAnBA,GAA2Be,CAA3Bf,GAAiC,GACrC,EAAOhD,OAAP,CAAA,MAAOA,CA5CqC,YA4C5C,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,U,GAA+B,UAAQ,CAAR,EAAgB;AAE7C,QAAIgD,CAAAA,GAAQhD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACRA,OADQA,CAAAA,MACRA,CADAgD,UAAQhD,KAAZ,IAAA;AAAA,QAEIkE,CAAAA,GAAO5C,CAAAA,CAAAA,aAAAA,CAAAA,MAAAA,CAFX;AAGI6C,IAAAA,CAAAA,GAAU,QAAA,CAAA,CAAA,aAAA,CAAA,WAAA,CAAA,GAAA,OAAA,GAAqD,MAA/DA;AAqBJ,WAAO,CApBgBC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,YAAAA,EACvB,CAAA,SAAUpE,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,2BAAA,EAAA,qBAAA,EAAA,UAAA,EAAA,uBAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,2BAAA,EAAA,kBAAA,EAAA,6CAAA,EAAA,KAAA,EAAA,8BAAA,EAAA,4BAAA,EADuBoE,0DACvB,CADuBA,IAmBnB,GAnBmBA,GAmBbpB,CAnBaoB,GAmBN,KAnBMA,GAmBEF,CAnBFE,GAmBS,KAnBTA,GAmBiBD,CAnBjBC,GAmB2B,GAC3C,EAAOpE,OAAP,CAAA,MAAOA,CA1B+B,mBA0BtC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,W,GAAgC,UAAQ,CAAR,EAAgB;AAE9C,QAAIoD,CAAAA,GAAO9B,CAAAA,CAAAA,aAAAA,CAAAA,MAAAA,CAAX;AACA,QAAA,WAAA,CAAA,EACM+C,CAIAjC,GAJcpC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACdA,OADcA,CAAAA,MACdA,CADcA,YAAAA,KACkB,IADhCqE,EAEAC,CAEAlC,GAFcpC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACdA,OADcA,CAAAA,MACdA,CADcA,UAAAA,CAFdqE,EAIAjC,CAAAA,GAAOiC,CAAPjC,GAAAA,SAAOiC,GAAPjC,CAAOiC,GALb,GACMA,CADN,KAMO,IAAA,UAAA,CAAA,EACDA,CAIJ,GAJkBrE,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACdA,OADcA,CAAAA,MACdA,CADcA,UAAAA,KACgB,IAD9BqE,EAEAC,CAEJ,GAFkBtE,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACdA,OADcA,CAAAA,MACdA,CADcA,YAAAA,KACkB,IAHhCqE,EAIAjC,CAAJ,GAAWkC,CAAX,GAAA,QAAWA,GAAX,CAAWA,GALN,GACDD,CADC,KAOL,MAAMb,KAAAA,CAAAA,mBAAN,CAAMA,CAAN;AAEF,WAAO,CAAA,CAAA,EAAOxD,OAAP,CAAA,MAAOA,CAlBgC,mBAkBvC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,a,GAAkC,UAAQ,CAAR,EAAgB;AAKhD,WAAO,CADI,oBAFAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,UAAAA,KACuB,IACvB,IAA0B,IAC9B,EAAOA,OAAP,CAAA,MAAOA,CALkC,mBAKzC,CAAP;;;AC/U2B,EAAA,OAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;;SAK7B,CAAA,M,CAAA,W,GAAgC,UAAQ,CAAR,EAAgB;AAE9C,QAAIuE,CAAAA,GAAJ,CAAA;AAAA,QACInC,CAAAA,GAAO,EADX;AAEIpC,IAAAA,OAAJ,CAAA,MAAIA,CAAJ,gBAAIA,KAEFoC,CAFF,IAEUpC,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EAFV,CAEUA,CAFNA;;AAIJ,OAAG;AACD,UAAA,CAAA,GAAgBA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA,EACZA,OADYA,CAAAA,MACZA,CADJ,UAAgBA,KACkB,OADlC;AAEA,UAAA,CAAA,GAAaA,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAAAA,OAAb,CAAaA,KACTA,OADJ,CAAA,MACIA,CAAewE,IADnB;AAEIxE,MAAAA,OAAJ,CAAA,MAAIA,CAAJ,gBAAIA,KACFyE,CADF,GACezE,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CACTA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EADSA,CACTA,CADSA,EAETA,OAFSA,CAAAA,MAETA,CAHN,MACeA,IADf,CAAIA;AAKJoC,MAAAA,CAAAA,IAAAA,CAAS,KAAA,CAAA,GAAA,KAAA,GAATA,OAAAA,IAAAA,CAAAA,GAAAA,KAAAA,GAA8DqC,CAA9DrC;AACA,QAXC,CAWD;AAXF,KAAA,QAYS,CAAA,CAAA,QAAA,CAAA,OAZT,CAYS,CAZT;;AAcA,QAAId,CAAAA,CAAAA,QAAAA,CAAJ,MAAIA,KAA0BtB,OAA9B,CAAA,MAA8BA,CAA9B,gBAAA,EACEyE,CAOA,GAPazE,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAAAA,MAAAA,KACTA,OAMJ,CANYiE,MAARjE,CAAewE,IADnBC,EAEIzE,OAKJ,CALYiE,MAARjE,CAAe0E,gBAAf1E,KACFyE,CAIF,GAJezE,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CACTA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EADSA,CACTA,CADSA,EAETA,OAFSA,CAAAA,MAETA,CAFSA,MAAAA,IAEgByE,CAH3BzE,CAFJyE,EAOA,CAAA,IAAA,YAAoBA,CAPpBA;AASF,WAhC8C,CAgC9C;AAGFzE,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,GAAoCA,OAApCA,CAAAA,MAAoCA,CAAe,WAAnDA;;SAEA,CAAA,M,CAAA,a,GAAkC,UAAQ,CAAR,EAAgB;AAUhD,QAAI4E,CAAAA,GARYD;AACd,MAAA,EAAA,EADcA,IAAAA;AAEd,MAAA,GAAA,EAFcA,IAAAA;AAGd,MAAA,EAAA,EAHcA,GAAAA;AAId,MAAA,GAAA,EAJcA,IAAAA;AAKd,MAAA,EAAA,EALcA,GAAAA;AAMd,MAAA,GAAA,EANcA;AAAAA,MAQSrD,CAAAA,CAAAA,aAAAA,CAAzB,IAAyBA,CARTqD,CAQhB;AAAA,QACIE,CAAAA,GAAQ7E,OAAR6E,CAAAA,MAAQ7E,CADZ,gBAAA;AAAA,QAEI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAZ8E,CAAY9E,KAAiD,GAFjE;AAGI+E,IAAAA,CAAAA,GAAY/E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAZ+E,CAAY/E,KAAiD,GAA7D+E;AAEJ,WAAO,CADID,CACJ,GADgB,GAAZA,GAAkBF,CAAlBE,GAA6B,GAA7BA,GAAmCC,CACvC,EAfyC,CAezC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,e,GAAoC,UAAQ,CAAR,EAAgB;AAElD,QAAIH,CAAAA,GAAW,SAACtD,CAAAA,CAAAA,aAAAA,CAAD,IAACA,CAAD,GAAA,KAAA,GAAf,IAAA;AAAA,QACIuD,CAAAA,GAAQ,SAAA,CAAA,GAAsB7E,OAAtB,CAAA,MAAsBA,CAAtB,iBAAA,GACRA,OADQ,CAAA,MACRA,CAFJ,gBAAA;AAAA,QAGI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAHhB;AAII+E,IAAAA,CAAAA,GAAY/E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAZ+E;;AACJ,QAAKD,CAAL,IAAA,CAAA,EAIO;AAEL,UAAIE,CAAAA,GAAkB,SAAA,CAAA,GAAA,MAAA,GAA+B,OAArD;AACKF,MAAAA,CAAL,KACEA,CADF,GAAA,CAAA,CAAKA;AAGAC,MAAAA,CAAL,KACEA,CADF,GANK,CAML,CAAKA;AAVP,KAAA,MAGEA,CAAAA,GADAD,CACAC,GADY,OACZA;;AAYF,WAAO,CADID,CACJ,GADgB,GAAZA,GAAkBF,CAAlBE,GAA6B,GAA7BA,GAAmCC,CACvC,EAtB2C,CAsB3C,CAAP;AAGF/E,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,GAAiC,UAAQ,CAAR,EAAgB;AAK/C,WAAO,CADI,UAFKA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACZA,OADYA,CAAAA,MACZA,CADYA,iBAAAA,KACyB,MAC9B,CACJ,EAAOA,OAAP,CAAA,MAAOA,CALiC,iBAKxC,CAAP;AAGF,GARAA;;SAQA,CAAA,M,CAAA,a,GAAkC,UAAQ,CAAR,EAAgB;AAGhD,WAAO,CADIoC,UAACd,CAAAA,CAAAA,aAAAA,CAADc,MAACd,CAADc,GAAAA,MAAAA,GAAmD,OACvD,EAAOpC,OAAP,CAAA,MAAOA,CAHkC,YAGzC,CAAP;AAGFA,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,UAAAA,GAA+B,UAAQ,CAAR,EAAgB;AAE7C,WAAO,CAAA,MAAA,EAASA,OAAT,CAAA,MAASA,CAF6B,YAEtC,CAAP;AAGF,GALAA;;SAKA,CAAA,M,CAAA,a,GAAkC,UAAQ,CAAR,EAAgB;AAEhD,QAAIiF,CAAAA,GAAWjF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EACXA,OADWA,CAAAA,MACXA,CADAiF,iBAAWjF,KAAf,OAAA;AAAA,QAEIkF,CAAAA,GAAalF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACbA,OADaA,CAAAA,MACbA,CADAkF,iBAAalF,KACwB,MAHzC;AAIImF,IAAAA,CAAAA,GAAanF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACbA,OADaA,CAAAA,MACbA,CADAmF,iBAAanF,KACwB,MADrCmF;AAGJ,WAAO,CADID,CACJ,GADiB,MAAbA,GAAsBD,CAAtBC,GAAiC,QAAjCA,GAA4CC,CAChD,EAAOnF,OAAP,CAAA,MAAOA,CATkC,iBASzC,CAAP;;;ACjH2B,EAAA,OAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;;AAK7BA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,mBAAAA,GAAwC,UAAQ,CAAR,EAAgB;AAIpD,QAAIoF,CAAAA,GAFF9D,CAAAA,CAAAA,QAAAA,CAAJ,OAAIA,IAEY0C,MAAAA,CAAO9B,QAAAA,CAASZ,CAAAA,CAAAA,aAAAA,CAATY,OAASZ,CAATY,EAFvB,EAEuBA,CAAP8B,CAFZ1C,GAKYtB,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACVA,OADUA,CAAAA,MACVA,CANN,UAKgBA,KACoB,GAJlC;AAOAoF,IAAAA,CAAAA,GADEpF,OAAAA,CAAAA,QAAAA,CAAJ,CAAIA,IACQkC,QAAAA,CAAAA,CAAAA,EADZ,EACYA,CADRlC,GAAJ,SAAA,CAAA,GAG+B,GAF7BoF;AAIF,QAAIC,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAAb;AACAqF,IAAAA,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAATqF,CAASrF,KAA6CA,OAAtDqF,CAAAA,MAAsDrF,CAAewE,IAArEa;AAIA,WADW,SAFGrF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,eAAAA,CAAAA,OAAAA,EACDA,OADCA,CAAAA,sBAAAA,CAEH,GAAmB,YAAnB,GAAkCoF,CAAlC,GAA4C,MAA5C,GAnB2C,CAoBtD;AAGF,GAvBApF;;SAuBA,CAAA,M,CAAA,e,GAAoCA,OAApC,CAAA,MAAoCA,CAAe,mB;;AAEnDA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,mBAAAA,GAAwC,UAAQ,CAAR,EAAgB;AAEtD,QAAIsF,CAAAA,GAAAA,WAAQhE,CAAAA,CAAAA,aAAAA,CAAZ,MAAYA,CAAZ;AAAA,QACIwD,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACZsF,CAAAA,GAAQtF,OAARsF,CAAAA,MAAQtF,CAARsF,iBAAAA,GACAtF,OADAsF,CAAAA,MACAtF,CAFA8E,UAAY9E,KADhB,OAAA;AAAA,QAIIqF,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAJb;AAKAqF,IAAAA,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAATqF,CAASrF,KAA6CA,OAAtDqF,CAAAA,MAAsDrF,CAAewE,IAArEa;AACIC,IAAAA,CAAJ,KACER,CADF,GAAA,SAAA,CAAA,CAAIQ;AAGJ,WAAA,WAAA,CAAA,GAAA,KAAA,GAXsD,CAWtD;AAGF,GAdAtF;;SAcA,CAAA,M,CAAA,Y,GAAiC,UAAQ,CAAR,EAAgB;AAE/C,QAAIuF,CAAAA,GAAYvF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CACZsB,CAAAA,CAAAA,aAAAA,CADYtB,KACZsB,CADYtB,EACgBA,OADhBA,CAAhB,sBAAgBA,CAAhB;AAAA,QAEI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,UAAY9E,KAFhB,GAAA;AAAA,QAII+E,CAAAA,GAAY/E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EACZA,OADYA,CAAAA,MACZA,CADA+E,UAAY/E,KAJhB,GAAA;AAAA,QAMIwF,CAAAA,GAAYxF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EACZA,OADYA,CAAAA,MACZA,CADAwF,UAAYxF,KANhB,GAAA;AAAA,QAQIqF,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CARb;AASAqF,IAAAA,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAATqF,CAASrF,KAA6CA,OAAtDqF,CAAAA,MAAsDrF,CAAewE,IAArEa;;AAEA,QAAIjD,CAAAA,GAAJ,EAAA;AAAA,QAIIqD,CAAAA,GAAgBA,YAAW;AAC7B,aAAO,OAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,SAAA,EAEH,CAAA,SAAUzF,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,sBAAA,EAAA,wBAAA,EAAA,iBAAA,EAHyB,wBAGzB,CAFG,CAAP;AALF,KAAA;AAAA,QAaI0F,CAAAA,GAAkBA,YAAW;AAC/B,aAAO1F,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,WAAAA,EAEH,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,sBAAA,EAAA,wBAAA,EAAA,iBAAA,EAH2B,wBAG3B,CAFGA,CAAP;AASE2F,KAvBJ;;AAuBIA,IAAAA,CAAAA,GAAsBA,UAAQ,CAARA,EAAQ,CAARA,EAAQ,CAARA,EAA0B;AAClD,aAAA,MAAA,CAAA,GAAA,MAAA,GAAA,CAAA,GAAA,QAAA,GACIF,CADJ,EAAA,GAAA,GAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,OAAA,GAEIC,CAFJ,EAAA,GAAA,GAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GADkD,GAClD;AAKF,KANIC;;AAMJ,QAAI3F,OAAAA,CAAAA,QAAAA,CAAJ,CAAIA,KAA+BA,OAAAA,CAAAA,QAAAA,CAAnC,CAAmCA,CAA/BA,IACAA,OAAAA,CAAAA,QAAAA,CADJ,CACIA,CADJ,EAGE8E,CAGA,GAHYc,MAAAA,CAAAA,CAAAA,CAAZd,EACAC,CAEA,GAFYa,MAAAA,CAAAA,CAAAA,CADZd,EAEAU,CACA,GADYK,IAAAA,CAAAA,GAAAA,CAASD,MAAAA,CAATC,CAASD,CAATC,CAFZf,EAGA,MAAIA,CAAJ,GAAA,CAAA,IAAA,MAA2BC,CAA3B,GAAA,CAAA,IAAA,MAAkDS,CAAlD,GAAA,CAAA,IAEMV,CAAJ,IAAA,CAAIA,IAEFC,CAAAA,IAGEe,CAKF,GAPA,KAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,GAIUhB,CAJV,GAAA,IAIUA,GAAmBC,CAL7BA,EAQA,KAAA,CAAA,KACEe,CADF,IAAA,OAVF,CAUE,CAVEhB,KAeFC,CAAAA,IACA,CAAA,GAAQD,CAAR,GAAA,IAAQA,GAAR,CAAQA,GAAR,KAAQA,GAhBV,CAAIA,GAkBJ,CAAA,GAAA,WAAA,CAAA,GApBF,GAAA,KAwBIgB,CAIF,GALIhB,CAAJ,GAAA,CAAIA,GACMW,CADV,EAAIX,GAGMY,CAAAA,EAFRI,EAIF,CAAA,IAAA,MAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAlCJ,GAME,CAHAhB,CAHF,KAoCO;AAEL,UAAIiB,CAAAA,GAAQA,UAAQ,CAARA,EAAQ,CAARA,EAAsB;AAC5B/F,QAAAA,OAAAA,CAAAA,QAAAA,CAAJ,CAAIA,IAEFgG,CAFF,GAEQJ,MAAAA,CAFR,CAEQA,CAFJ5F,GAGOgG,CAAAA,CAAAA,KAAAA,CAAJ,OAAIA,IAETA,CAFK,GAAA,WAAA,CAAA,GAAA,GAAIA,IAKLC,CAGJ,GAHcjG,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,eAAAA,CACVuF,CADUvF,GAAAA,CAAAA,EACUA,OADVA,CAAAA,sBAAAA,CAAViG,EAEJ7D,CACA,IADQ6D,CACR,GADkB,WAAVA,GAAwBD,CAAxBC,GAA8B,KAFlCA,EAGJ,CAAA,GARK,CAAID,CAHPhG;AAaJ,eAdgC,CAchC;AAEEkG,OAhBJ;;AAgBIA,MAAAA,CAAAA,GAAWH,CAAAA,CAAAA,CAAAA,EAAAA,QAAAA,CAAXG;AACAC,MAAAA,CAAAA,GAASJ,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAATI;AACAC,MAAAA,CAAAA,GAASL,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAATK;AAEJ,kBAAI,OAAJ,CAAA,IAAA,YAAmC,OAAnC,CAAA,IAEIN,CAIF,GALII,CAAJ,GAAA,CAAIA,GACMT,CADV,EAAIS,GAGMR,CAAAA,EAFRI,EAIF,CAAA,IAAA,MAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GANF,GAAA,IASEA,CATF,GASUH,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EA/BL,CA+BKA,CATV;AAYFvD;AAAAA,WAAAA,CACA,IADQ,SAASmD,CAAT,GAAqB,MAArB,GAA8BO,CAA9B,GAAsC,KAAtC,GAhHuC,CAgH/C1D;AAIFpC,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,GAAqC,UAAQ,CAAR,EAAgB;AAEnD,QAAIuF,CAAAA,GAAYvF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CACZsB,CAAAA,CAAAA,aAAAA,CADYtB,KACZsB,CADYtB,EACgBA,OADhBA,CAAhB,sBAAgBA,CAAhB;AAAA,QAEI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,gBAAY9E,KAFhB,IAAA;AAAA,QAIIqF,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAJb;AAKAqF,IAAAA,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAATqF,CAASrF,KAA6CA,OAAtDqF,CAAAA,MAAsDrF,CAAewE,IAArEa;AAEA,WADW,SAASE,CAAT,GAAqB,MAArB,GAA8BT,CAA9B,GAA0C,KAA1C,GARwC,CASnD;AAGF,GAZA9E;;SAYA,CAAA,M,CAAA,wB,GAA6C,UAAQ,CAAR,EAAgB;AAE3D,QAAIqG,CAAAA,GAAO,EAAX;AACIrG,IAAAA,OAAJ,CAAA,MAAIA,CAAJ,gBAAIA,KAEFqG,CAFF,IAEUrG,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EAFV,CAEUA,CAFNA;AAIAA,IAAAA,OAAJ,CAAA,MAAIA,CAAJ,gBAAIA,KAGFqG,CAHF,IAGUrG,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EAHV,CAGUA,CAHNA;;AAKJ,QAAIA,OAAJ,CAAA,MAAIA,CAAJ,gBAAA,EAAqC;AACnC,UAAIsG,CAAAA,GAAOtG,OAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,gCAAAA,CAAAA,eAAAA,CAAAA,CAAAA,CAAX;AAEIsG,MAAAA,CAAJ,IAAY,CAACA,CAAD,CAAZ,oBAAIA,KAIFD,CAJF,IAIUrG,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EAPyB,CAOzBA,CAJNsG;AAON;;AAAA,YAAQhF,CAAAA,CAAAA,aAAAA,CAAR,MAAQA,CAAR;AACE,WAAA,OAAA;AACE,eAAO+E,CAAP,GAAc,SAAd;;AACF,WAAA,UAAA;AACE,eAAOA,CAAP,GAJJ,YAII;AAJJ;;AAMA,UAAM7C,KAAAA,CA5BqD,yBA4BrDA,CAAN;;;ACxM2B,EAAA,OAAA,CAAA,MAAA,CAAA,IAAA,GAAA,EAAA;AAM7BxD,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,oBAAAA;;AAEAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,GAAgC,UAAQ,CAAR,EAAgB;AAE1CoC,IAAAA,CAAAA,GAAOwD,MAAAA,CAAOtE,CAAAA,CAAAA,aAAAA,CAAPsE,KAAOtE,CAAPsE,CAAPxD;;AAEJ,QAAYmE,QAAZ,IAAA,CAAA,EAAsB;AACpBnE,MAAAA,CAAAA,GAAO,cAAPA;AACA,UAAA,CAAA,GAAQpC,OAAR,CAAA,MAAQA,CAFY,mBAEpB;AAFF,KAAA,MAGmB,CAAZ,QAAY,IAAZ,CAAY,IACjBoC,CACA,GADO,eAAPA,EACA,CAAA,GAAQpC,OAAR,CAAA,MAAQA,CAFH,gBAAY,IAIjB6E,CAJK,GAIG,IAAA,CAAA,GAAW7E,OAAX,CAAA,MAAWA,CAAX,gBAAA,GACAA,OADA,CAAA,MACAA,CAAewG,YALN;;AAOnB,WAAO,CAAA,CAAA,EAduC,CAcvC,CAAP;AAGF,GAjBAxG;;SAiBA,CAAA,M,CAAA,e,GAAoC,UAAQ,CAAR,EAAgB;AASlD,QAAIyG,CAAAA,GAPY9B;AACd,MAAA,GAAA,EAAO,CAAA,KAAA,EAAQ3E,OAAR,CAAA,MAAQA,CADD2E,cACP,CADOA;AAEd,MAAA,KAAA,EAAS,CAAA,KAAA,EAAQ3E,OAAR,CAAA,MAAQA,CAFH2E,cAEL,CAFKA;AAGd,MAAA,QAAA,EAAY,CAAA,KAAA,EAAQ3E,OAAR,CAAA,MAAQA,CAHN2E,oBAGF,CAHEA;AAId,MAAA,MAAA,EAAU,CAAA,KAAA,EAAQ3E,OAAR,CAAA,MAAQA,CAJJ2E,oBAIJ,CAJIA;AAKd,MAAA,KAAA,EAAS,CAAA,MAAA,EAAS3E,OAAT,CAAA,MAASA,CALJ2E,oBAKL;AALKA,MAOMrD,CAAAA,CAAAA,aAAAA,CAAtB,IAAsBA,CAPNqD,CAOhB;AAAA,QACIC,CAAAA,GAAW6B,CAAAA,CAAAA,CAAAA,CADf;AAEI5B,IAAAA,CAAAA,GAAQ4B,CAAAA,CAAAA,CAAAA,CAAR5B;AACJ,QAAIC,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAZ8E,CAAY9E,KAAiD,GAAjE;AACI+E,IAAAA,CAAAA,GAAY/E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EAAZ+E,CAAY/E,KAAiD,GAA7D+E;AAEJ,WAAO,CADID,CACJ,GADgBF,CAAZE,GAAuBC,CAC3B,EAf2C,CAe3C,CAAP;AAQF,G;;SAAA,CAAA,M,CAAA,W,GAAgC,UAAQ,CAAR,EAAgB;AAE9C,QAAIH,CAAAA,GAAWtD,CAAAA,CAAAA,aAAAA,CAAAA,IAAAA,CAAf;;AAGA,QAAA,SAAA,CAAA,EAAuB;AAErB,UAAA,CAAA,GAAOtB,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EACHA,OADGA,CAAAA,MACHA,CADJ,gBAAOA,KACiC,GADxC;AAEA,aAAO,CAAA,MAAA,CAAA,EAAaA,OAAb,CAAA,MAAaA,CAJC,gBAId,CAAP;AAEFA;;AAAAA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,WAAAA,GAA6C,aAA7CA;AAEEgG,IAAAA,CAAAA,GADF,SAAA,CAAA,IAAA,SAAA,CAAA,IAAA,SAAA,CAAA,GACQhG,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EACFA,OADEA,CAAAA,MACFA,CAFN,oBACQA,KADR,GAAA,GAIQA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EACFA,OADEA,CAAAA,MACFA,CALN,UAIQA,KAC4B,GAJlCgG;;AAQF,YAAA,CAAA;AACE,WAAA,KAAA;AACE5D,QAAAA,CAAAA,GAAAA,eAAAA,CAAAA,GAA4B,GAA5BA;AACA;;AACF,WAAA,MAAA;AACE,QAAA,CAAA,GAAA,eAAA,CAAA,GAA4B,GAA5B;AACA;;AACF,WAAA,IAAA;AACEA,QAAAA,CAAAA,GAAAA,cAAAA,CAAAA,GAA2B,GAA3BA;AACA;;AACF,WAAA,OAAA;AACEA,QAAAA,CAAAA,GAAAA,gBAAAA,CAAAA,GAA6B,GAA7BA;AACA;;AACF,WAAA,KAAA;AACEA,QAAAA,CAAAA,GAAAA,cAAAA,CAAAA,GAA2B,GAA3BA;AACA;;AACF,WAAA,OAAA;AACEA,QAAAA,CAAAA,GAAAA,iBAAAA,CAAAA,GAA8B,GAA9BA;AACA;;AACF,WAAA,OAAA;AACEA,QAAAA,CAAAA,GAAAA,WAAAA,CAAAA,GAAwB,GAAxBA;AACA;;AACF,WAAA,SAAA;AACEA,QAAAA,CAAAA,GAAAA,eAAAA,CAAAA,GAA4B,GAA5BA;AACA;;AACF,WAAA,WAAA;AACEA,QAAAA,CAAAA,GAAAA,gBAAAA,CAAAA,GAA6B,GAA7BA;AACA;;AACF,WAAA,KAAA;AACEA,QAAAA,CAAAA,GAAAA,cAAAA,CAAAA,GAA2B,qBAA3BA;AACA;;AACF,WAAA,KAAA;AACEA,QAAAA,CAAAA,GAAAA,cAAAA,CAAAA,GAA2B,qBAA3BA;AACA;;AACF,WAAA,KAAA;AACEA,QAAAA,CAAAA,GAAAA,cAAAA,CAAAA,GAnCJ,qBAmCIA;AAnCJ;;AAsCA,QAAA,CAAA,EACE,OAAO,CAAA,CAAA,EAAOpC,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAAP;;AAIF,YAAA,CAAA;AACE,WAAA,MAAA;AACE,QAAA,CAAA,GAAA,eAAA,CAAA,GAA4B,mBAA5B;AACA;;AACF,WAAA,MAAA;AACEoC,QAAAA,CAAAA,GAAAA,eAAAA,CAAAA,GAA4B,mBAA5BA;AACA;;AACF,WAAA,MAAA;AACEA,QAAAA,CAAAA,GAAAA,eAAAA,CAAAA,GAA4B,mBAA5BA;AACA;;AACF;AACE,cAAMoB,KAAAA,CAAAA,4BAXV,CAWUA,CAAN;AAXJ;;AAaA,WAAO,CAAA,CAAA,EAAOxD,OAAP,CAAA,MAAOA,CA7EgC,oBA6EvC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,a,GAAkC,UAAQ,CAAR,EAAgB;AAEhD,QAAI0G,CAAAA,GAAY;AACd,MAAA,EAAA,EAAM,CAAA,SAAA,EAAY1G,OAAZ,CAAA,MAAYA,CADJ,YACR,CADQ;AAEd,MAAA,CAAA,EAAK,CAAA,QAAA,EAAWA,OAAX,CAAA,MAAWA,CAFF,YAET,CAFS;AAGd,MAAA,YAAA,EAAgB,CAAA,wBAAA,EACCA,OADD,CAAA,MACCA,CAJH,oBAGE,CAHF;AAKd,MAAA,KAAA,EAAS,CAAA,cAAA,EAAiBA,OAAjB,CAAA,MAAiBA,CALZ,YAKL,CALK;AAMd,MAAA,OAAA,EAAW,CAAA,oBAAA,EAAuBA,OAAvB,CAAA,MAAuBA,CANpB,YAMH,CANG;AAOd,MAAA,QAAA,EAAY,CAAA,cAAA,EAAmBA,OAAnB,CAAA,MAAmBA,CAPjB,YAOF;AAPE,KAAhB;AASI2G,IAAAA,CAAAA,GAAWrF,CAAAA,CAAAA,aAAAA,CAAAA,UAAAA,CAAXqF;AACJ,kBAAA,CAAA,KACE3G,OADF,CAAA,MACEA,CADF,YACEA,CADF,WACEA,GADF,aAAA;AAGA,WAAO0G,CAAAA,CAfyC,CAezCA,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,oB,GAAyC,UAAQ,CAAR,EAAgB;AAGvD,QAAIE,CAAAA,GAAkB5G,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,iBAAAA,EAClBA,OADkBA,CAAAA,MAClBA,CADA4G,oBAAkB5G,KAAtB,GAAA;AAAA,QAEI6G,CAAAA,GAAoBvF,CAAAA,CAAAA,aAAAA,CAAAA,UAAAA,CAFxB;AAIA,QAAA,WAAA,CAAA,EACEtB,OAAAA,OAyBO,CAzBCiE,MAARjE,CAAeY,YAAfZ,CAA4B,WAA5BA,GAA6C,aAA7CA,EACAA,OAwBO,CAxBCiE,MAARjE,CAAeY,YAAfZ,CAA4B,0BAA5BA,GACI,4BAFJA,EAyBO,CAtBYqC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,cAAAA,EAEf,CAAA,SAAUrC,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,MAAA,EAAA,gEAAA,EAAA,wDAAA,EAAA,iCAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,aAAA,EAAA,oBAAA,EAAA,wBAAA,EAAA,iBAAA,EAAA,iFAAA,EAAA,wDAAA,EAAA,kBAAA,EAAA,4DAAA,EAAA,gDAAA,EAAA,8CAAA,EAAA,oBAAA,EAFeqC,eAEf,CAFeA,IAqBG,GArBHA,GAqBSuE,CArBTvE,GAqB2B,GACvC,EAAOrC,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAzBPA;;AA2BF,YAAA,CAAA;AACE,WAAA,MAAA;AACE,YAAA,CAAA,GAAO4G,CAAP,GAAyB,WAAzB;AACA;;AACF,WAAA,KAAA;AACExE,QAAAA,CAAAA,GAAOwE,CAAPxE,GAAyB,WAAzBA;AACA;;AACF,WAAA,OAAA;AACEA,QAAAA,CAAAA,GAAOwE,CAAPxE,GAAyB,WAAzBA;AACA;;AACF,WAAA,UAAA;AACEA,QAAAA,CAAAA,GAAOwE,CAAPxE,GAAyB,MAAzBA;AACA;;AACF,WAAA,UAAA;AACEA,QAAAA,CAAAA,GAAOwE,CAAPxE,GAAyB,MAAzBA;AACA;;AACF,WAAA,cAAA;AACM0E,QAAAA,CAAAA,GAAU9G,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EACVA,OADUA,CAAAA,MACVA,CADUA,oBAAAA,CAAV8G;AAGJ,YAAI,CAAJ,CAAI,IAAJ,OAAA,CAAA,EACE,OAAO,CAAA,OAAA,EAAU9G,OAAV,CAAA,MAAUA,CAAV,YAAA,CAAP;AAEFoC,QAAAA,CAAAA,GAAOwE,CAAPxE,GAAAA,KAAOwE,GAAPxE,CAAOwE,GAvBX,OAuBIxE;AAvBJ;;AA0BA,WAAO,CAAA,CAAA,EAAOpC,OAAP,CAAA,MAAOA,CA7DyC,gBA6DhD,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,W,GAAgC,UAAQ,CAAR,EAAgB;AAE9CA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,0BAAAA,GACI,4BADJA;AAEA,QAAI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,cAAY9E,KACsB,GADtC;AAEIiG,IAAAA,CAAAA,GAAUjG,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCsB,CAAAA,CAAAA,aAAAA,CAAnCtB,KAAmCsB,CAAnCtB,EACVA,OADUA,CAAAA,sBAAAA,CAAViG;AAEJ,WAAOA,CAAP,GAAA,MAAOA,GAAP,CAAOA,GAAP,iBAAOA,GAAP,CAAOA,GAAP,sBAAOA,GAAP,CAAOA,GARuC,IAQ9C;AAKFjG,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,UAAAA,GAA+BA,OAA/BA,CAAAA,MAA+BA,CAAe,WAA9CA;AAEAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,SAAAA,GAA8BA,OAA9BA,CAAAA,MAA8BA,CAAe,WAA7CA;;SAEA,CAAA,M,CAAA,Y,GAAiC,UAAQ,CAAR,EAAgB;AAE/C,QAAI+G,CAAAA,GAAOzF,CAAAA,CAAAA,aAAAA,CAAAA,IAAAA,CAAX;AACI0B,IAAAA,CAAAA,GAAOhD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgD,UAAOhD,KACuB,IAD9BgD;;AAGJ,YAAA,CAAA;AACE,WAAA,KAAA;AACEZ,QAAAA,CAAAA,GAAAA,SAAAA,CAAAA,GAAuB,GAAvBA;AACA;;AACF,WAAA,KAAA;AACEA,QAAAA,CAAAA,GAAAA,SAAAA,CAAAA,GAAuB,GAAvBA;AACA;;AACF,WAAA,KAAA;AACEA,QAAAA,CAAAA,GAAAA,SAAAA,CAAAA,GAAuB,GAAvBA;AACA;;AACF,WAAA,SAAA;AACEpC,QAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,0BAAAA,GACI,4BADJA;AAEIqC,QAAAA,CAAAA,GAAe,OAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,WAAA,EAIf,CAAA,SAAUrC,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,WAAA,EAAA,4DAAA,EAAA,4BAAA,EAJe,iDAIf,CAJe,CAAfqC;AAQJD,QAAAA,CAAAA,GAAOC,CAAPD,GAAAA,GAAOC,GAAPD,CAAOC,GAA4B,GAAnCD;AACA;;AACF,WAAA,QAAA;AACEpC,QAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,0BAAAA,GACI,4BADJA;AAEIqC,QAAAA,CAAJ,GAAmB,OAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,aAAA,EAIf,CAAA,SAAUrC,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,WAAA,EAAA,oEAAA,EAAA,4BAAA,EAAA,+BAAA,EAAA,wFAAA,EAAA,SAAA,EAJe,iDAIf,CAJe,CAAfqC;AAYJD,QAAAA,CAAAA,GAAOC,CAAPD,GAAAA,GAAOC,GAAPD,CAAOC,GAA4B,GAAnCD;AACA;;AACF,WAAA,MAAA;AACMC,QAAAA,CAAJ,GAAmBrC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,YAAAA,EAKf,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,cAAA,EAAA,cAAA,EAAA,mEAAA,EAAA,kFAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,0BAAA,EAAA,mBAAA,EAAA,0BAAA,EAAA,4BAAA,EAAA,uBAAA,EAAA,4CAAA,EAAA,sBAAA,EAAA,mBAAA,EAAA,gCAAA,EAAA,2CAAA,EAAA,gCAAA,EAAA,kCAAA,EALeA,gBAKf,CALeA,CAAfqC;AAyBJD,QAAAA,CAAAA,GAAOC,CAAPD,GAAAA,GAAOC,GAAPD,CAAOC,GAA4B,GAAnCD;AACA;;AACF,WAAA,SAAA;AACEpC,QAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,WAAAA,GAA6C,aAA7CA;AACIqC,QAAAA,CAAJ,GAAmB,OAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,yBAAA,EAEf,CAAA,SAAUrC,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,YAAA,EAAA,oBAAA,EAAA,qBAAA,EAAA,kCAAA,EAAA,wDAAA,EAFe,8BAEf,CAFe,CAAfqC;AAQJD,QAAAA,CAAAA,GAAOC,CAAPD,GAAAA,GAAOC,GAAPD,CAAOC,GAA4B,GAAnCD;AACA;;AACF,WAAA,QAAA;AACEpC,QAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,aAAAA,GAA+C,eAA/CA;AACAoC,QAAAA,CAAAA,GAAAA,mBAAAA,CAAAA,GAAiC,GAAjCA;AACA;;AACF;AACE,cAAMoB,KAAAA,CAAAA,uBArFV,CAqFUA,CAAN;AArFJ;;AAuFA,WAAO,CAAA,CAAA,EAAOxD,OAAP,CAAA,MAAOA,CA7FiC,mBA6FxC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,W,GAAgC,UAAQ,CAAR,EAAgB;AAE9C,QAAI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,UAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,oBAAY9E,KAC4B,GAD5C;AAEI+E,IAAAA,CAAAA,GAAY/E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EACZA,OADYA,CAAAA,MACZA,CADA+E,oBAAY/E,KAC4B,GADxC+E;AAGJ,WAAO,CADID,CACJ,GADgB,KAAZA,GAAoBC,CACxB,EAAO/E,OAAP,CAAA,MAAOA,CAPgC,oBAOvC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,c,GAAmC,UAAQ,CAAR,EAAgB;AAEjD,QAAI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,UAAY9E,KAAhB,GAAA;AAAA,QAEI+E,CAAAA,GAAY/E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EACZA,OADYA,CAAAA,MACZA,CADA+E,UAAY/E,KACkB,GAHlC;AAIIgH,IAAAA,CAAAA,GAAYhH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACZA,OADYA,CAAAA,MACZA,CADAgH,UAAYhH,KACkB,cAD9BgH;AAIJ,WAAO,CAFI,aAAalC,CAAb,GAAyB,IAAzB,GAAgCC,CAAhC,GAA4C,KAA5C,GACPiC,CADO,GACK,GACT,EAAOhH,OAAP,CAAA,MAAOA,CAVmC,mBAU1C,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,e,GAAoC,UAAQ,CAAR,EAAgB;AAElDA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,aAAAA,GAA+C,eAA/CA;AACA,QAAI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,UAAY9E,KACkB,GADlC;AAEI+E,IAAAA,CAAAA,GAAY/E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EACZA,OADYA,CAAAA,MACZA,CADA+E,UAAY/E,KACkB,GAD9B+E;AAGJ,WAAO,CADI,oBAAoBD,CAApB,GAAgC,IAAhC,GAAuCC,CAAvC,GAAmD,GACvD,EAAO/E,OAAP,CAAA,MAAOA,CARoC,mBAQ3C,CAAP;AAGFA,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,iBAAAA,GAAsC,UAAQ,CAAR,EAAgB;AAEpDA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,aAAAA,GAA+C,eAA/CA;AACA,WAAO,CAAA,iBAAA,EAAoBA,OAApB,CAAA,MAAoBA,CAHyB,mBAG7C,CAAP;AAGF,GANAA;;SAMA,CAAA,M,CAAA,U,GAA+B,UAAQ,CAAR,EAAgB;AAE7CA,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,WAAAA,GAA6C,aAA7CA;AACA,QAAI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,UAAY9E,KACkB,GADlC;AAIA,WAAO,CAAA,iBAFSA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,GAAAA,EACZA,OADYA,CAAAA,MACZA,CADYA,UAAAA,KACkB,GAC3B,IAAA,IAAA,GAAA,CAAA,GAAA,mBAAA,EACHA,OADG,CAAA,MACHA,CARyC,oBAOtC,CAAP;;;AClX2B,EAAA,OAAA,CAAA,MAAA,CAAA,UAAA,GAAA,EAAA;;SAK7B,CAAA,M,CAAA,oB,GAAyC,UAAQ,CAAR,EAAgB;AAQvD,SAJA,IAAIiH,CAAAA,GAAJ,EAAA,EAAA,CAAA,EAEI9G,CAAAA,GAAYmB,CAAZnB,CAFJ,SAAA,EAGII,CAAAA,GAAYP,OAAAA,CAAAA,SAAAA,CAAAA,gBAAAA,CAAZO,CAAYP,KAHhB,EAAA,EAISM,CAAAA,GAAT,CAAA,EAA0B4G,CAA1B,GAAqC3G,CAAAA,CAArC,CAAqCA,CAArC,EAAmDD,CAAnD,EAAA,EACE2F,CACA,GADUiB,CACV,CADmBC,IAAnBlB,EACwC,CAAxC,CAAwC,IAApC3E,CAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAJ,CAAIA,CAAoC,IACtC2F,CAAAA,CAAAA,IAAAA,CAAajH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAAA,CAAAA,EACTA,OADSA,CAAbiH,sBAAajH,CAAbiH,CAFFhB;;AAOE5F,IAAAA,CAAAA,GAAaL,OAAAA,CAAAA,SAAAA,CAAAA,qBAAAA,CAAAA,CAAAA,CAAbK;;AACJ,SAASC,CAAT,GAAA,CAAA,EAAgBA,CAAhB,GAAoBD,CAApB,CAAA,MAAA,EAAuCC,CAAvC,EAAA,EACE2G,CAAAA,CAAAA,IAAAA,CAAajH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCK,CAAAA,CAAnCL,CAAmCK,CAAnCL,EACTA,OADSA,CAAAA,KACTA,CADJiH,uBAAajH,CAAbiH;;AAIFA,IAAAA,CAAAA,GAAUA,CAAAA,CAAAA,MAAAA,GACNjH,OADMiH,CAAAA,MACNjH,CADMiH,MACNjH,GADMiH,SACNjH,GAAoCiH,CAAAA,CAAAA,IAAAA,CAD9BA,IAC8BA,CAApCjH,GADMiH,IAAAA,GAC0D,EADpEA;AAEIG,IAAAA,CAAAA,GAAWpH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CACXsB,CAAAA,CAAAA,aAAAA,CADWtB,MACXsB,CADWtB,EACkBA,OADlBA,CAAAA,uBAAAA,CAAXoH;KAEAC,GAAQ,E;AACRrH,IAAAA,OAAJ,CAAA,MAAIA,CAAJ,gBAAIA,KACFqH,CADF,IACWrH,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EADX,CACWA,CADPA;AAGAA,IAAAA,OAAJ,CAAA,MAAIA,CAAJ,gBAAIA,KACFqH,CADF,IACWrH,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EADX,CACWA,CADPA;AAGAqH,IAAAA,CAAJ,KACEA,CADF,GACUrH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAkCA,OAAlCA,CAAAA,MAAkCA,CAD5C,MACUA,CADV,CAAIqH;AAGJ,QAAIC,CAAAA,GAAW,EAAf;AACItH,IAAAA,OAAJ,CAAA,MAAIA,CAAJ,kBAAIA,KACFsH,CADF,GACatH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CACPA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,kBAAAA,EADOA,CACPA,CADOA,EAEPA,OAFOA,CAAAA,MAEPA,CAHN,MACaA,CADTA;AAKJ,QAAIqF,CAAAA,GAASrF,OAAAA,CAAAA,MAAAA,CAAAA,eAAAA,CAAAA,CAAAA,EAAb,OAAaA,CAAb;AAAA,QACIuH,CAAAA,GAAc,OAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA,EAAA,QAAA,EACdvH,OADc,CAAA,MACdA,CADAuH,UAAc,KADlB,EAAA;AAAA,QAGIC,CAAAA,GAAQ,EAHZ;AAIInC,IAAAA,CAAJ,IAAA,CAAIA,KAEFmC,CAFF,GAAA,CAAInC;AAIAkC,IAAAA,CAAJ,GACEA,CADF,GACgBvH,OADhB,CAAA,MACgBA,CADhB,MACgBA,GADhB,SACgBA,GADhB,CACgBA,GADhB,IAAA,GAEYqF,CAFZ,KAGEA,CAHF,GAGWrF,OAHX,CAAA,MAGWA,CAHX,IAAA,CAAIuH;AAKJ,QAAIE,CAAAA,GAAO,EAAX;AACIlH,IAAAA,CAAJ,GAAgBe,CAAAA,CAAAA,OAAAA,EAAZf;;AACJ,SAASD,CAAT,GAAA,CAAA,EAAgBA,CAAhB,GAAoBC,CAApB,CAAA,MAAA,EAAsCD,CAAtC,EAAA,EACEmH,CAAAA,CAAAA,CAAAA,CAAAA,GAAUzH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCO,CAAAA,CAAnCP,CAAmCO,CAAnCP,EACNA,OADMA,CAAAA,sBAAAA,CAAVyH;;AAGErF,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,GAAAA,GAAAA,GAAiCqF,CAAAA,CAAAA,IAAAA,CAAjCrF,IAAiCqF,CAAjCrF,GAAAA,MAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA,GAC8CmF,CAD9CnF;AAEJA,IAAAA,CAAAA,GAAOpC,OAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAPoC;AAEApC,IAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,CAAAA,MAAAA,CAAAA,IAA8CoC,CAA9CpC;AACA,WAlEuD,IAkEvD;AAKFA,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,sBAAAA,GACIA,OADJA,CAAAA,MACIA,CAAe,oBADnBA;;SAGA,CAAA,M,CAAA,qB,GAA0C,UAAQ,CAAR,EAAgB;AAMxD,SAJA,IAAIoH,CAAAA,GAAWpH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCsB,CAAAA,CAAAA,aAAAA,CAAnCtB,MAAmCsB,CAAnCtB,EACXA,OADWA,CAAf,uBAAeA,CAAf,EAEIyH,CAAAA,GAFJ,EAAA,EAGIlH,CAAAA,GAAYe,CAAAA,CAHhB,OAGgBA,EAHhB,EAIShB,CAAAA,GAAT,CAAA,EAAgBA,CAAhB,GAAoBC,CAApB,CAAA,MAAA,EAAsCD,CAAtC,EAAA,EACEmH,CAAAA,CAAAA,CAAAA,CAAAA,GAAUzH,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,EACNA,OADMA,CAAAA,MACNA,CADJyH,UAAUzH,KACwB,MADlCyH;;AAIF,WAAO,CADIL,CACJ,GADe,GAAXA,GAAiBK,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAjBL,GAAmC,GACvC,EAAOpH,OAAP,CAAA,MAAOA,CAX0C,mBAWjD,CAAP;AAGFA,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,uBAAAA,GAA4C,UAAQ,CAAR,EAAgB;AAI9CA,WAAAA,OAAAA,CAAAA,MAAAA,CAAAA,qBAAAA,CAAAA,CAAAA,EACZ,CADYA,IAJ8C,IAI9CA;AAId,GARAA;;SAQA,CAAA,M,CAAA,mB,GAAwC,UAAQ,CAAR,EAAgB;AAItD,QAAIoC,CAAAA,GAAAA,SAFYpC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,WAAAA,EACZA,OADYA,CAAAA,MACZA,CADYA,UAAAA,KACkB,OAC9BoC,IAA2B,KAA/B;AACIpC,IAAAA,OAAJ,CAAA,MAAIA,CAAJ,gBAAIA,KAGFoC,CAHF,IAGUpC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CACJA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAwBA,OAAxBA,CAAAA,MAAwBA,CAAxBA,gBAAAA,EADIA,CACJA,CADIA,EAEJA,OAFIA,CAAAA,MAEJA,CALN,MAGUA,CAHNA;AAOAsB,IAAAA,CAAJ,CAAA,eAAIA,IACEmC,CAEJ,GAFYzD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACRA,OADQA,CAAAA,MACRA,CADQA,UAAAA,KACsB,MAD9ByD,EAEJ,CAAA,IAAQzD,OAAR,CAAA,MAAQA,CAAR,MAAQA,GAAR,SAAQA,GAAR,CAAQA,GAHV,IAAIsB,IAKFc,CALF,IAKUpC,OALV,CAAA,MAKUA,CALV,MAKUA,GAAwB,UAL9BsB;AAOJ,WAnBsD,CAmBtD;;;ACxH2B,EAAA,OAAA,CAAA,MAAA,CAAA,KAAA,GAAA,EAAA;;AAK7BtB,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,GAAyB,UAAQ,CAAR,EAAgB;AAGvC,WAAO,CADIA,OAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAsBsB,CAAAA,CAAAA,aAAAA,CAAtBtB,MAAsBsB,CAAtBtB,CACJ,EAAOA,OAAP,CAAA,MAAOA,CAHyB,YAGhC,CAAP;AAGFA,GANAA;;AAMAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,GAAmC,UAAQ,CAAR,EAAgB;AAGjD,WAAO,CADIA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAgCsB,CAAAA,CAAAA,aAAAA,CAAhCtB,MAAgCsB,CAAhCtB,CACJ,EAAOA,OAAP,CAAA,MAAOA,CAHmC,YAG1C,CAAP;AAUFA,GAbAA;;AAaAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,GAAmC0H,UAAQ,CAARA,EAAgB;AACjD,WAAI1H,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,SAAAA,CAAAA,IAAAA,CAAJ,CAAIA,IAAJ,CAAIA,GAAJ,SAAA,CAAA,GADiD,GACjD;AASFA,GAVAA;;AAUAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,SAAAA,GAA6C,uBAA7CA;;SAEA,CAAA,M,CAAA,S,GAA8B,UAAQ,CAAR,EAAgB;AAG5C,YAAQsB,CAAR,CAAA,UAAA;AACE,WAAA,CAAA;AACE,eAAO,CAAA,IAAA,EAAStB,OAAT,CAAA,MAASA,CAAT,YAAA,CAAP;;AAEF,WAAA,CAAA;AACM2H,eAAAA,CAGG,GAHO3H,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACNA,OADMA,CAAAA,MACNA,CADMA,UAAAA,KACwB,IADlC2H,EAEAvF,CACG,GADIpC,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAFP2H,EAGG,CAAA,CAAA,EAAO3H,OAAP,CAAA,MAAOA,CAAP,mBAAA,CAHH2H;;AAKN,WAAA,CAAA;AACE,YAAIC,CAAAA,GAAW5H,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACXA,OADWA,CAAAA,MACXA,CADA4H,UAAW5H,KACmB,IADlC;AAEI6H,QAAAA,CAAAA,GAAW7H,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACXA,OADWA,CAAAA,MACXA,CADA6H,UAAW7H,KACmB,IAD9B6H;AAEAzF,QAAAA,CAAJ,GAAWpC,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAX,CAAWA,IAAX,KAAWA,GACPA,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CADAoC;eAEG,CAAA,CAAA,EAAOpC,OAAP,CAAA,MAAOA,CAAP,cAAA,C;;AAET;AACM4C,QAAAA,CAAAA,GAAW,EAAXA;;AACJ,aAAK,IAAItC,CAAAA,GAAT,CAAA,EAAgBA,CAAhB,GAAoBgB,CAApB,CAAA,UAAA,EAAsChB,CAAtC,EAAA,EACEsC,CAAAA,CAAAA,CAAAA,CAAAA,GAAc5C,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,EACNA,OADMA,CAAAA,MACNA,CADR4C,UAAc5C,KACwB,IADtC4C;;AAGEkF,QAAAA,CAAAA,GAAU9H,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,eAAAA,CAAAA,GAAAA,EACVA,OADUA,CAAAA,sBAAAA,CAAV8H;AAEA1F,QAAAA,CAAJ,GAAA,kBAAA,CAAA,GAAA,QAAA,GAAA,CAAA,GAAA,OAAA,GACIQ,CAAAA,CAAAA,IAAAA,CADJ,IACIA,CADJ,GAC0B,KADtBR;AAEJ,eAAO,CAAA,CAAA,EAAOpC,OAAP,CAAA,MAAOA,CAhC0B,mBAgCjC,CAAP;AA7BJ;AAiCF,G;;SAAA,CAAA,M,CAAA,W,GAAgC,UAAQ,CAAR,EAAgB;AAE9C,QAAIiG,CAAAA,GAAUjG,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCsB,CAAAA,CAAAA,aAAAA,CAAnCtB,KAAmCsB,CAAnCtB,EACVA,OADUA,CAAAA,sBAAAA,CAAd;AAEIyD,IAAAA,CAAAA,GAAQzD,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACRA,OADQA,CAAAA,MACRA,CADAyD,UAAQzD,KACsB,IAD9ByD;AAEJ,WAAOwC,CAAP,GAAA,SAAOA,GAAP,CAAOA,GAAP,MAAOA,GACHjG,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CADJ,CACIA,CADGiG,GANuC,IAM9C;AAIFjG,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,GAAgC,UAAQ,CAAR,EAAgB;AAI9C,WAAO,CAAA,UAFIA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,UAAAA,KACuB,IAC3B,IAAA,GAAA,EAAsBA,OAAtB,CAAA,MAAsBA,CAJiB,mBAIvC,CAAP;AAGF,GAPAA;;SAOA,CAAA,M,CAAA,Y,GAAiC,UAAQ,CAAR,EAAgB;AAK/C,WAAO,CADI,cAFAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,UAAAA,KACuB,IACvB,IAAoB,GACxB,EAAOA,OAAP,CAAA,MAAOA,CALiC,iBAKxC,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,Y,GAAiC,UAAQ,CAAR,EAAgB;AAG/C,QAAI4E,CAAAA,GAAW,WAAA,CAAA,CAAA,aAAA,CAAA,KAAA,CAAA,GAAA,MAAA,GAAf,OAAA;AAAA,QACImD,CAAAA,GAAY/H,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACZA,OADYA,CAAAA,MACZA,CADA+H,UAAY/H,KACkB,IAFlC;AAKIoC,IAAAA,CAAAA,GAAAA,CAFOpC,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,YAAAA,KACyB,IAChCoC,IAAAA,GAAAA,GAAAA,CAAAA,GAAAA,GAAAA,GAAAA,CAAAA,GAAiD,GAAjDA;AACJ,WAAId,CAAJ,CAAA,SAAIA,CAAJ,OAAIA,CAAJ,aAAIA,GACK,CAACc,CAAD,GAAA,MAAA,EAAgBpC,OAAhB,CAAA,MAAgBA,CADzB,cACS,CADLsB,GAGG,CAAA,CAAA,EAAOtB,OAAP,CAAA,MAAOA,CAZiC,mBAYxC,CAHP;AAMF,G;;SAAA,CAAA,M,CAAA,W,GAAgC,UAAQ,CAAR,EAAgB;AAG9C,QAAIqD,CAAAA,GAAQ/B,CAAAA,CAAAA,aAAAA,CAAR+B,OAAQ/B,KAAZ,YAAA;AAAA,QACI0G,CAAAA,GAAOhI,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgI,YAAOhI,KACyB,IAFpC;;AAGA,YAAA,CAAA;AACE,WAAA,OAAA;AAEE,eAAO,CADIgI,CACJ,GADW,KACX,EAAOhI,OAAP,CAAA,MAAOA,CAAP,YAAA,CAAP;;AACF,WAAA,MAAA;AAEE,eAAO,CADIgI,CACJ,GADW,MACX,EAAOhI,OAAP,CAAA,MAAOA,CAAP,YAAA,CAAP;;AACF,WAAA,YAAA;AACMiC,eAAAA,CAEG,GAFEjC,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAALiC,EAEG,CADI+F,CACJ,GADW,GAAPA,GAAa/F,CAAb+F,GAAkB,GACtB,EAAOhI,OAAP,CAAA,MAAOA,CAAP,YAAA,CAFHiC;;AAGN,WAAA,UAAA;AACMA,eAAAA,CAEG,GAFEjC,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,EAA8C,CAA9CA,CAAAA,CAALiC,EAEG,CADI+F,CACJ,GADW,GAAPA,GAAa/F,CAAb+F,GAAkB,GACtB,EAAOhI,OAAP,CAAA,MAAOA,CAAP,YAAA,CAFHiC;;AAGN,WAAA,QAAA;AACEjC,eAAAA,OAOO,CAPCiE,MAARjE,CAAeY,YAAfZ,CAA4B,aAA5BA,GAA+C,eAA/CA,EAOO,CANYA,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,oBAAAA,EAEf,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,SAAA,EAAA,wCAAA,EAFeA,mBAEf,CAFeA,IAKG,GALHA,GAKSgI,CALThI,GAKgB,GAC5B,EAAOA,OAAP,CAAA,MAAOA,CAvBlB,mBAuBW,CAPPA;AAhBJ;;AAyBA,UAAMwD,KAAAA,CA/BwC,iCA+BxCA,CAAN;AAGF,G;;SAAA,CAAA,M,CAAA,iB,GAAsC,UAAQ,CAAR,EAAgB;AAEpD,QAAII,CAAAA,GAAStC,CAAAA,CAAAA,aAAAA,CAAb,QAAaA,CAAb;AAAA,QACIuC,CAAAA,GAASvC,CAAAA,CAAAA,aAAAA,CADb,QACaA,CADb;AAAA,QAEI0G,CAAAA,GAAOhI,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,QAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgI,YAAOhI,KACyB,IAHpC;;AAIA,YAAA,CAAA;AACE,WAAA,YAAA;AACM8D,QAAAA,CAAAA,GAAM9D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAN8D;AACJ,eAAA,CAAA,KACEA,CADF,GAAA,EAAA;AAGA;;AACF,WAAA,UAAA;AACMA,QAAAA,CAAJ,GAAU9D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAA+C,CAA/CA,CAAAA,CAAN8D;AACJ;;AACF,WAAA,OAAA;AACMA,QAAAA,CAAJ,GAAU,EAANA;AACJ;;AACF;AACE,cAAMN,KAAAA,CAdV,sCAcUA,CAAN;AAdJ;;AAgBA,YAAA,CAAA;AACE,WAAA,YAAA;AACMO,QAAAA,CAAAA,GAAM/D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,CAAN+D;AACJ;;AACF,WAAA,UAAA;AACMA,QAAAA,CAAJ,GAAU/D,OAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAA+C,CAA/CA,CAAAA,CAAN+D;AAGC/D,QAAAA,OAAAA,CAAAA,QAAAA,CAAiBgE,MAAAA,CAAtB,CAAsBA,CAAjBhE,IAAL,OAAA,CAAA,KAIE+D,CAJF,GAAA,EAAA,CAAK/D,IACHA,OACA,CADQiE,MAARjE,CAAeY,YAAfZ,CAA4B,UAA5BA,GAA4C,YAA5CA,EACA,CAAA,IAFF,iBAAKA;AAML;;AACF,WAAA,MAAA;AACM+D,QAAAA,CAAJ,GAAU,EAANA;AACJ;;AACF;AACE,cAAMP,KAAAA,CAnBV,sCAmBUA,CAAN;AAnBJ;;AAsBA,WAAO,CADIwE,CACJ,GADW,GAAPA,GAAalE,CAAbkE,GAAmB,KAAnBA,GAA2BjE,CAA3BiE,GAAiC,GACrC,EAAOhI,OAAP,CAAA,MAAOA,CA5CsC,YA4C7C,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,e,GAAoC,UAAQ,CAAR,EAAgB;AAOlD,QAAI4E,CAAAA,GALYD;AACd,MAAA,SAAA,EADcA,UAAAA;AAEd,MAAA,SAAA,EAFcA,UAAAA;AAGd,MAAA,SAAA,EAHcA;AAAAA,MAKSrD,CAAAA,CAAAA,aAAAA,CAAV,MAAUA,CALTqD,CAKhB;AAIA,WAAO,CAAA,CAHI3E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,YAAAA,KACyB,IAE7B,IADW4E,CACX,EAAO5E,OAAP,CAAA,MAAOA,CAXoC,mBAW3C,CAAP;AAGFA,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,SAAAA,GAA8B,UAAQ,CAAR,EAAgB;AAO5C,QAAI4E,CAAAA,GALYD;AACd,MAAA,IAAA,EADcA,WAAAA;AAEd,MAAA,KAAA,EAFcA,WAAAA;AAGd,MAAA,IAAA,EAHcA;AAAAA,MAKSrD,CAAAA,CAAAA,aAAAA,CAAV,MAAUA,CALTqD,CAKhB;AAIA,WAAO,CAAA,CAHI3E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,YAAAA,KACyB,IAE7B,IADW4E,CACX,EAAO5E,OAAP,CAAA,MAAOA,CAX8B,mBAWrC,CAAP;AAGF,GAdAA;;SAcA,CAAA,M,CAAA,U,GAA+B,UAAQ,CAAR,EAAgB;AAI7C,WAAA,YAFUA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACNA,OADMA,CAAAA,MACNA,CADMA,UAAAA,KACwB,IAClC,IAJ6C,KAI7C;AAGF,G;;SAAA,CAAA,M,CAAA,e,GAAoC,UAAQ,CAAR,EAAgB;AAElD,QAAIqC,CAAAA,GAAerC,OAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,CAAAA,aAAAA,EAEf,CAAA,SAAUA,OAAV,CAAA,MAAUA,CAAV,0BAAA,GAAA,QAAA,EAAA,QAAA,EAAA,2BAAA,EAAA,qBAAA,EAFJ,uBAEI,CAFeA,CAAnB;AAAA,QASMiI,CAAAA,GAFF3G,CAAAA,CAAAA,QAAAA,CAAJ,MAAIA,IAEQtB,OAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAsBsB,CAAAA,CAAAA,aAAAA,CAFlC,MAEkCA,CAAtBtB,CAFRsB,GAKQtB,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACNA,OADMA,CAAAA,MACNA,CANN,UAKYA,KACwB,IAbpC;AAeIoC,IAAAA,CAAAA,GAAOC,CAAPD,GAAAA,GAAOC,GAAPD,CAAOC,GAA2B,GAAlCD;AAC0C,gBAA/Bd,CAAAA,CAAAA,aAAAA,CAAAA,MAAAA,CAA+B,KAE5Cc,CADF,GAAA,WAAA,CAAA,GAAA,GAD8C;AAI9C,WAAO,CAAA,CAAA,EAAOpC,OAAP,CAAA,MAAOA,CAtBoC,mBAsB3C,CAAP;AAGF,G;;SAAA,CAAA,M,CAAA,W,GAAgCA,OAAhC,CAAA,MAAgCA,CAAe,e;;AAE/CA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,UAAAA,GAA+B,UAAQ,CAAR,EAAgB;AAC7C,QAAIgI,CAAAA,GAAOhI,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgI,YAAOhI,KACyB,IADpC;AAEIkI,IAAAA,CAAAA,GAAMlI,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EACNA,OADMA,CAAAA,MACNA,CADAkI,UAAMlI,KACwB,IAD9BkI;AAGJ,WAAO,CADIF,CACJ,GADW,SAAPA,GAAmBE,CAAnBF,GAAyB,GAC7B,EAAOhI,OAAP,CAAA,MAAOA,CAN+B,YAMtC,CAAP;AAGF,GATAA;;SASA,CAAA,M,CAAA,Y,GAAiC,UAAQ,CAAR,EAAgB;AAC/C,QAAIgI,CAAAA,GAAOhI,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADAgI,YAAOhI,KAAX,IAAA;AAAA,QAEImI,CAAAA,GAAOnI,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADAmI,UAAOnI,KACuB,IAHlC;AAIIoI,IAAAA,CAAAA,GAAKpI,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EACLA,OADKA,CAAAA,MACLA,CADAoI,UAAKpI,KACyB,IAD9BoI;AAGJ,WAAO,CADIJ,CACJ,GADW,WAAPA,GAAqBG,CAArBH,GAA4B,IAA5BA,GAAmCI,CAAnCJ,GAAwC,GAC5C,EAAOhI,OAAP,CAAA,MAAOA,CARiC,YAQxC,CAAP;AAGFA,G;;AAAAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,YAAAA,GAAiC,UAAQ,CAAR,EAAgB;AAI/C,WAAO,CAAA,CAHIA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EACPA,OADOA,CAAAA,MACPA,CADOA,YAAAA,KACyB,IAE7B,IADW,QACX,EAAOA,OAAP,CAAA,MAAOA,CAJiC,YAIxC,CAAP;GAJFA;;ACnR6B,EAAA,OAAA,CAAA,MAAA,CAAA,SAAA,GAAA,EAAA;;AAK7BA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,aAAAA,GAAkC,UAAQ,CAAR,EAAgB;AAIhD,WAAO,CAFIA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCsB,CAAAA,CAAAA,aAAAA,CAAnCtB,KAAmCsB,CAAnCtB,EACPA,OADOA,CAAAA,sBAAAA,CAEJ,EAAOA,OAAP,CAAA,MAAOA,CAJkC,YAIzC,CAAP;AAGFA,GAPAA;;AAOAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,aAAAA,GAAkC,UAAQ,CAAR,EAAgB;AAEhD,QAAI8E,CAAAA,GAAY9E,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,CAAAA,EAAAA,OAAAA,EACZA,OADYA,CAAAA,MACZA,CADA8E,UAAY9E,KACkB,GADlC;AAEcA,WAAAA,OAAAA,CAAAA,MAAAA,CAAAA,WAAAA,CAAAA,OAAAA,CAAmCsB,CAAAA,CAAAA,aAAAA,CAAnCtB,KAAmCsB,CAAnCtB,EACVA,OADUA,CAAAA,sBAAAA,IAEd,KAFcA,GAEd,CAFcA,GAJkC,IAIlCA;GAJhBA;;ACZ6B,EAAA,OAAA,CAAA,MAAA,CAAA,gBAAA,GAAA,EAAA;AAO7BA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,qBAAAA,GAA0CA,OAA1CA,CAAAA,MAA0CA,CAAe,aAAzDA;AACAA,EAAAA,OAAAA,CAAAA,MAAAA,CAAAA,qBAAAA,GAA0CA,OAA1CA,CAAAA,MAA0CA,CAAe,aAAzDA","sourceRoot":"./","sourcesContent":["// Do not edit this file; automatically generated by gulp.\n\n/* eslint-disable */\n;(function(root, factory) {\n  if (typeof define === 'function' && define.amd) { // AMD\n    define(['./blockly_compressed.js'], factory);\n  } else if (typeof exports === 'object') { // Node.js\n    module.exports = factory(require('./blockly_compressed.js'));\n  } else { // Browser\n    root.Blockly.Python = factory(root.Blockly);\n  }\n}(this, function(Blockly) {\n  'use strict';Blockly.Python=new Blockly.Generator(\"Python\");Blockly.Python.addReservedWords(\"False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip\");\nBlockly.Python.ORDER_ATOMIC=0;Blockly.Python.ORDER_COLLECTION=1;Blockly.Python.ORDER_STRING_CONVERSION=1;Blockly.Python.ORDER_MEMBER=2.1;Blockly.Python.ORDER_FUNCTION_CALL=2.2;Blockly.Python.ORDER_EXPONENTIATION=3;Blockly.Python.ORDER_UNARY_SIGN=4;Blockly.Python.ORDER_BITWISE_NOT=4;Blockly.Python.ORDER_MULTIPLICATIVE=5;Blockly.Python.ORDER_ADDITIVE=6;Blockly.Python.ORDER_BITWISE_SHIFT=7;Blockly.Python.ORDER_BITWISE_AND=8;Blockly.Python.ORDER_BITWISE_XOR=9;Blockly.Python.ORDER_BITWISE_OR=10;\nBlockly.Python.ORDER_RELATIONAL=11;Blockly.Python.ORDER_LOGICAL_NOT=12;Blockly.Python.ORDER_LOGICAL_AND=13;Blockly.Python.ORDER_LOGICAL_OR=14;Blockly.Python.ORDER_CONDITIONAL=15;Blockly.Python.ORDER_LAMBDA=16;Blockly.Python.ORDER_NONE=99;\nBlockly.Python.ORDER_OVERRIDES=[[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_LOGICAL_NOT,Blockly.Python.ORDER_LOGICAL_NOT],[Blockly.Python.ORDER_LOGICAL_AND,Blockly.Python.ORDER_LOGICAL_AND],[Blockly.Python.ORDER_LOGICAL_OR,Blockly.Python.ORDER_LOGICAL_OR]];\nBlockly.Python.init=function(a){Blockly.Python.PASS=this.INDENT+\"pass\\n\";Blockly.Python.definitions_=Object.create(null);Blockly.Python.functionNames_=Object.create(null);Blockly.Python.variableDB_?Blockly.Python.variableDB_.reset():Blockly.Python.variableDB_=new Blockly.Names(Blockly.Python.RESERVED_WORDS_);Blockly.Python.variableDB_.setVariableMap(a.getVariableMap());for(var b=[],c=Blockly.Variables.allDeveloperVariables(a),d=0;d<c.length;d++)b.push(Blockly.Python.variableDB_.getName(c[d],Blockly.Names.DEVELOPER_VARIABLE_TYPE)+\n\" = None\");a=Blockly.Variables.allUsedVarModels(a);for(d=0;d<a.length;d++)b.push(Blockly.Python.variableDB_.getName(a[d].getId(),Blockly.VARIABLE_CATEGORY_NAME)+\" = None\");Blockly.Python.definitions_.variables=b.join(\"\\n\")};\nBlockly.Python.finish=function(a){var b=[],c=[],d;for(d in Blockly.Python.definitions_){var e=Blockly.Python.definitions_[d];e.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)?b.push(e):c.push(e)}delete Blockly.Python.definitions_;delete Blockly.Python.functionNames_;Blockly.Python.variableDB_.reset();return(b.join(\"\\n\")+\"\\n\\n\"+c.join(\"\\n\\n\")).replace(/\\n\\n+/g,\"\\n\\n\").replace(/\\n*$/,\"\\n\\n\\n\")+a};Blockly.Python.scrubNakedValue=function(a){return a+\"\\n\"};\nBlockly.Python.quote_=function(a){a=a.replace(/\\\\/g,\"\\\\\\\\\").replace(/\\n/g,\"\\\\\\n\");var b=\"'\";-1!==a.indexOf(\"'\")&&(-1===a.indexOf('\"')?b='\"':a=a.replace(/'/g,\"\\\\'\"));return b+a+b};Blockly.Python.multiline_quote_=function(a){return a.split(/\\n/g).map(Blockly.Python.quote_).join(\" + '\\\\n' + \\n\")};\nBlockly.Python.scrub_=function(a,b,c){var d=\"\";if(!a.outputConnection||!a.outputConnection.targetConnection){var e=a.getCommentText();e&&(e=Blockly.utils.string.wrap(e,Blockly.Python.COMMENT_WRAP-3),d+=Blockly.Python.prefixLines(e+\"\\n\",\"# \"));for(var f=0;f<a.inputList.length;f++)a.inputList[f].type==Blockly.INPUT_VALUE&&(e=a.inputList[f].connection.targetBlock())&&(e=Blockly.Python.allNestedComments(e))&&(d+=Blockly.Python.prefixLines(e,\"# \"))}a=a.nextConnection&&a.nextConnection.targetBlock();c=\nc?\"\":Blockly.Python.blockToCode(a);return d+b+c};Blockly.Python.getAdjustedInt=function(a,b,c,d){c=c||0;a.workspace.options.oneBasedIndex&&c--;var e=a.workspace.options.oneBasedIndex?\"1\":\"0\";a=Blockly.Python.valueToCode(a,b,c?Blockly.Python.ORDER_ADDITIVE:Blockly.Python.ORDER_NONE)||e;Blockly.isNumber(a)?(a=parseInt(a,10)+c,d&&(a=-a)):(a=0<c?\"int(\"+a+\" + \"+c+\")\":0>c?\"int(\"+a+\" - \"+-c+\")\":\"int(\"+a+\")\",d&&(a=\"-\"+a));return a};Blockly.Python.colour={};Blockly.Python.colour_picker=function(a){return[Blockly.Python.quote_(a.getFieldValue(\"COLOUR\")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.colour_random=function(a){Blockly.Python.definitions_.import_random=\"import random\";return[\"'#%06x' % random.randint(0, 2**24 - 1)\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.colour_rgb=function(a){var b=Blockly.Python.provideFunction_(\"colour_rgb\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(r, g, b):\",\"  r = round(min(100, max(0, r)) * 2.55)\",\"  g = round(min(100, max(0, g)) * 2.55)\",\"  b = round(min(100, max(0, b)) * 2.55)\",\"  return '#%02x%02x%02x' % (r, g, b)\"]),c=Blockly.Python.valueToCode(a,\"RED\",Blockly.Python.ORDER_NONE)||0,d=Blockly.Python.valueToCode(a,\"GREEN\",Blockly.Python.ORDER_NONE)||0;a=Blockly.Python.valueToCode(a,\"BLUE\",Blockly.Python.ORDER_NONE)||\n0;return[b+\"(\"+c+\", \"+d+\", \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.colour_blend=function(a){var b=Blockly.Python.provideFunction_(\"colour_blend\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(colour1, colour2, ratio):\",\"  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\",\"  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\",\"  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\",\"  ratio = min(1, max(0, ratio))\",\"  r = round(r1 * (1 - ratio) + r2 * ratio)\",\"  g = round(g1 * (1 - ratio) + g2 * ratio)\",\"  b = round(b1 * (1 - ratio) + b2 * ratio)\",\n\"  return '#%02x%02x%02x' % (r, g, b)\"]),c=Blockly.Python.valueToCode(a,\"COLOUR1\",Blockly.Python.ORDER_NONE)||\"'#000000'\",d=Blockly.Python.valueToCode(a,\"COLOUR2\",Blockly.Python.ORDER_NONE)||\"'#000000'\";a=Blockly.Python.valueToCode(a,\"RATIO\",Blockly.Python.ORDER_NONE)||0;return[b+\"(\"+c+\", \"+d+\", \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.lists={};Blockly.Python.lists_create_empty=function(a){return[\"[]\",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.lists_create_with=function(a){for(var b=Array(a.itemCount_),c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,\"ADD\"+c,Blockly.Python.ORDER_NONE)||\"None\";return[\"[\"+b.join(\", \")+\"]\",Blockly.Python.ORDER_ATOMIC]};\nBlockly.Python.lists_repeat=function(a){var b=Blockly.Python.valueToCode(a,\"ITEM\",Blockly.Python.ORDER_NONE)||\"None\";a=Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\";return[\"[\"+b+\"] * \"+a,Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.lists_length=function(a){return[\"len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"[]\")+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_isEmpty=function(a){return[\"not len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"[]\")+\")\",Blockly.Python.ORDER_LOGICAL_NOT]};\nBlockly.Python.lists_indexOf=function(a){var b=Blockly.Python.valueToCode(a,\"FIND\",Blockly.Python.ORDER_NONE)||\"[]\",c=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"''\";if(a.workspace.options.oneBasedIndex)var d=\" 0\",e=\" + 1\",f=\"\";else d=\" -1\",e=\"\",f=\" - 1\";if(\"FIRST\"==a.getFieldValue(\"END\"))return a=Blockly.Python.provideFunction_(\"first_index\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(my_list, elem):\",\"  try: index = my_list.index(elem)\"+e,\"  except: index =\"+d,\"  return index\"]),\n[a+\"(\"+c+\", \"+b+\")\",Blockly.Python.ORDER_FUNCTION_CALL];a=Blockly.Python.provideFunction_(\"last_index\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(my_list, elem):\",\"  try: index = len(my_list) - my_list[::-1].index(elem)\"+f,\"  except: index =\"+d,\"  return index\"]);return[a+\"(\"+c+\", \"+b+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_getIndex=function(a){var b=a.getFieldValue(\"MODE\")||\"GET\",c=a.getFieldValue(\"WHERE\")||\"FROM_START\",d=Blockly.Python.valueToCode(a,\"VALUE\",\"RANDOM\"==c?Blockly.Python.ORDER_NONE:Blockly.Python.ORDER_MEMBER)||\"[]\";switch(c){case \"FIRST\":if(\"GET\"==b)return[d+\"[0]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==b)return[d+\".pop(0)\",Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop(0)\\n\";break;case \"LAST\":if(\"GET\"==b)return[d+\"[-1]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==\nb)return[d+\".pop()\",Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop()\\n\";break;case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\"AT\");if(\"GET\"==b)return[d+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==b)return[d+\".pop(\"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop(\"+a+\")\\n\";break;case \"FROM_END\":a=Blockly.Python.getAdjustedInt(a,\"AT\",1,!0);if(\"GET\"==b)return[d+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];if(\"GET_REMOVE\"==b)return[d+\".pop(\"+a+\")\",\nBlockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==b)return d+\".pop(\"+a+\")\\n\";break;case \"RANDOM\":Blockly.Python.definitions_.import_random=\"import random\";if(\"GET\"==b)return[\"random.choice(\"+d+\")\",Blockly.Python.ORDER_FUNCTION_CALL];d=Blockly.Python.provideFunction_(\"lists_remove_random_item\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(myList):\",\"  x = int(random.random() * len(myList))\",\"  return myList.pop(x)\"])+\"(\"+d+\")\";if(\"GET_REMOVE\"==b)return[d,Blockly.Python.ORDER_FUNCTION_CALL];if(\"REMOVE\"==\nb)return d+\"\\n\"}throw Error(\"Unhandled combination (lists_getIndex).\");};\nBlockly.Python.lists_setIndex=function(a){var b=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_MEMBER)||\"[]\",c=a.getFieldValue(\"MODE\")||\"GET\",d=a.getFieldValue(\"WHERE\")||\"FROM_START\",e=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"None\";switch(d){case \"FIRST\":if(\"SET\"==c)return b+\"[0] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".insert(0, \"+e+\")\\n\";break;case \"LAST\":if(\"SET\"==c)return b+\"[-1] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".append(\"+e+\")\\n\";break;case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\n\"AT\");if(\"SET\"==c)return b+\"[\"+a+\"] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".insert(\"+a+\", \"+e+\")\\n\";break;case \"FROM_END\":a=Blockly.Python.getAdjustedInt(a,\"AT\",1,!0);if(\"SET\"==c)return b+\"[\"+a+\"] = \"+e+\"\\n\";if(\"INSERT\"==c)return b+\".insert(\"+a+\", \"+e+\")\\n\";break;case \"RANDOM\":Blockly.Python.definitions_.import_random=\"import random\";b.match(/^\\w+$/)?a=\"\":(a=Blockly.Python.variableDB_.getDistinctName(\"tmp_list\",Blockly.VARIABLE_CATEGORY_NAME),d=a+\" = \"+b+\"\\n\",b=a,a=d);d=Blockly.Python.variableDB_.getDistinctName(\"tmp_x\",\nBlockly.VARIABLE_CATEGORY_NAME);a+=d+\" = int(random.random() * len(\"+b+\"))\\n\";if(\"SET\"==c)return a+(b+\"[\"+d+\"] = \"+e+\"\\n\");if(\"INSERT\"==c)return a+(b+\".insert(\"+d+\", \"+e+\")\\n\")}throw Error(\"Unhandled combination (lists_setIndex).\");};\nBlockly.Python.lists_getSublist=function(a){var b=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_MEMBER)||\"[]\",c=a.getFieldValue(\"WHERE1\"),d=a.getFieldValue(\"WHERE2\");switch(c){case \"FROM_START\":c=Blockly.Python.getAdjustedInt(a,\"AT1\");\"0\"==c&&(c=\"\");break;case \"FROM_END\":c=Blockly.Python.getAdjustedInt(a,\"AT1\",1,!0);break;case \"FIRST\":c=\"\";break;default:throw Error(\"Unhandled option (lists_getSublist)\");}switch(d){case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\"AT2\",1);break;case \"FROM_END\":a=\nBlockly.Python.getAdjustedInt(a,\"AT2\",0,!0);Blockly.isNumber(String(a))?\"0\"==a&&(a=\"\"):(Blockly.Python.definitions_.import_sys=\"import sys\",a+=\" or sys.maxsize\");break;case \"LAST\":a=\"\";break;default:throw Error(\"Unhandled option (lists_getSublist)\");}return[b+\"[\"+c+\" : \"+a+\"]\",Blockly.Python.ORDER_MEMBER]};\nBlockly.Python.lists_sort=function(a){var b=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_NONE)||\"[]\",c=a.getFieldValue(\"TYPE\");a=\"1\"===a.getFieldValue(\"DIRECTION\")?\"False\":\"True\";return[Blockly.Python.provideFunction_(\"lists_sort\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(my_list, type, reverse):\",\"  def try_float(s):\",\"    try:\",\"      return float(s)\",\"    except:\",\"      return 0\",\"  key_funcs = {\",'    \"NUMERIC\": try_float,','    \"TEXT\": str,','    \"IGNORE_CASE\": lambda s: str(s).lower()',\n\"  }\",\"  key_func = key_funcs[type]\",\"  list_cpy = list(my_list)\",\"  return sorted(list_cpy, key=key_func, reverse=reverse)\"])+\"(\"+b+', \"'+c+'\", '+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_split=function(a){var b=a.getFieldValue(\"MODE\");if(\"SPLIT\"==b)b=Blockly.Python.valueToCode(a,\"INPUT\",Blockly.Python.ORDER_MEMBER)||\"''\",a=Blockly.Python.valueToCode(a,\"DELIM\",Blockly.Python.ORDER_NONE),a=b+\".split(\"+a+\")\";else if(\"JOIN\"==b)b=Blockly.Python.valueToCode(a,\"INPUT\",Blockly.Python.ORDER_NONE)||\"[]\",a=Blockly.Python.valueToCode(a,\"DELIM\",Blockly.Python.ORDER_MEMBER)||\"''\",a=a+\".join(\"+b+\")\";else throw Error(\"Unknown mode: \"+b);return[a,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.lists_reverse=function(a){return[\"list(reversed(\"+(Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_NONE)||\"[]\")+\"))\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.logic={};\nBlockly.Python.controls_if=function(a){var b=0,c=\"\";Blockly.Python.STATEMENT_PREFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));do{var d=Blockly.Python.valueToCode(a,\"IF\"+b,Blockly.Python.ORDER_NONE)||\"False\";var e=Blockly.Python.statementToCode(a,\"DO\"+b)||Blockly.Python.PASS;Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+e);c+=(0==b?\"if \":\"elif \")+d+\":\\n\"+e;++b}while(a.getInput(\"IF\"+\nb));if(a.getInput(\"ELSE\")||Blockly.Python.STATEMENT_SUFFIX)e=Blockly.Python.statementToCode(a,\"ELSE\")||Blockly.Python.PASS,Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+e),c+=\"else:\\n\"+e;return c};Blockly.Python.controls_ifelse=Blockly.Python.controls_if;\nBlockly.Python.logic_compare=function(a){var b={EQ:\"==\",NEQ:\"!=\",LT:\"<\",LTE:\"<=\",GT:\">\",GTE:\">=\"}[a.getFieldValue(\"OP\")],c=Blockly.Python.ORDER_RELATIONAL,d=Blockly.Python.valueToCode(a,\"A\",c)||\"0\";a=Blockly.Python.valueToCode(a,\"B\",c)||\"0\";return[d+\" \"+b+\" \"+a,c]};\nBlockly.Python.logic_operation=function(a){var b=\"AND\"==a.getFieldValue(\"OP\")?\"and\":\"or\",c=\"and\"==b?Blockly.Python.ORDER_LOGICAL_AND:Blockly.Python.ORDER_LOGICAL_OR,d=Blockly.Python.valueToCode(a,\"A\",c);a=Blockly.Python.valueToCode(a,\"B\",c);if(d||a){var e=\"and\"==b?\"True\":\"False\";d||(d=e);a||(a=e)}else a=d=\"False\";return[d+\" \"+b+\" \"+a,c]};Blockly.Python.logic_negate=function(a){return[\"not \"+(Blockly.Python.valueToCode(a,\"BOOL\",Blockly.Python.ORDER_LOGICAL_NOT)||\"True\"),Blockly.Python.ORDER_LOGICAL_NOT]};\nBlockly.Python.logic_boolean=function(a){return[\"TRUE\"==a.getFieldValue(\"BOOL\")?\"True\":\"False\",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.logic_null=function(a){return[\"None\",Blockly.Python.ORDER_ATOMIC]};\nBlockly.Python.logic_ternary=function(a){var b=Blockly.Python.valueToCode(a,\"IF\",Blockly.Python.ORDER_CONDITIONAL)||\"False\",c=Blockly.Python.valueToCode(a,\"THEN\",Blockly.Python.ORDER_CONDITIONAL)||\"None\";a=Blockly.Python.valueToCode(a,\"ELSE\",Blockly.Python.ORDER_CONDITIONAL)||\"None\";return[c+\" if \"+b+\" else \"+a,Blockly.Python.ORDER_CONDITIONAL]};Blockly.Python.loops={};Blockly.Python.controls_repeat_ext=function(a){var b=a.getField(\"TIMES\")?String(parseInt(a.getFieldValue(\"TIMES\"),10)):Blockly.Python.valueToCode(a,\"TIMES\",Blockly.Python.ORDER_NONE)||\"0\";b=Blockly.isNumber(b)?parseInt(b,10):\"int(\"+b+\")\";var c=Blockly.Python.statementToCode(a,\"DO\");c=Blockly.Python.addLoopTrap(c,a)||Blockly.Python.PASS;return\"for \"+Blockly.Python.variableDB_.getDistinctName(\"count\",Blockly.VARIABLE_CATEGORY_NAME)+\" in range(\"+b+\"):\\n\"+c};\nBlockly.Python.controls_repeat=Blockly.Python.controls_repeat_ext;Blockly.Python.controls_whileUntil=function(a){var b=\"UNTIL\"==a.getFieldValue(\"MODE\"),c=Blockly.Python.valueToCode(a,\"BOOL\",b?Blockly.Python.ORDER_LOGICAL_NOT:Blockly.Python.ORDER_NONE)||\"False\",d=Blockly.Python.statementToCode(a,\"DO\");d=Blockly.Python.addLoopTrap(d,a)||Blockly.Python.PASS;b&&(c=\"not \"+c);return\"while \"+c+\":\\n\"+d};\nBlockly.Python.controls_for=function(a){var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME),c=Blockly.Python.valueToCode(a,\"FROM\",Blockly.Python.ORDER_NONE)||\"0\",d=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"0\",e=Blockly.Python.valueToCode(a,\"BY\",Blockly.Python.ORDER_NONE)||\"1\",f=Blockly.Python.statementToCode(a,\"DO\");f=Blockly.Python.addLoopTrap(f,a)||Blockly.Python.PASS;var n=\"\",k=function(){return Blockly.Python.provideFunction_(\"upRange\",\n[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(start, stop, step):\",\"  while start <= stop:\",\"    yield start\",\"    start += abs(step)\"])},h=function(){return Blockly.Python.provideFunction_(\"downRange\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(start, stop, step):\",\"  while start >= stop:\",\"    yield start\",\"    start -= abs(step)\"])};a=function(g,l,p){return\"(\"+g+\" <= \"+l+\") and \"+k()+\"(\"+g+\", \"+l+\", \"+p+\") or \"+h()+\"(\"+g+\", \"+l+\", \"+p+\")\"};if(Blockly.isNumber(c)&&Blockly.isNumber(d)&&\nBlockly.isNumber(e))c=Number(c),d=Number(d),e=Math.abs(Number(e)),0===c%1&&0===d%1&&0===e%1?(c<=d?(d++,a=0==c&&1==e?d:c+\", \"+d,1!=e&&(a+=\", \"+e)):(d--,a=c+\", \"+d+\", -\"+e),a=\"range(\"+a+\")\"):(a=c<d?k():h(),a+=\"(\"+c+\", \"+d+\", \"+e+\")\");else{var m=function(g,l){Blockly.isNumber(g)?g=Number(g):g.match(/^\\w+$/)?g=\"float(\"+g+\")\":(l=Blockly.Python.variableDB_.getDistinctName(b+l,Blockly.VARIABLE_CATEGORY_NAME),n+=l+\" = float(\"+g+\")\\n\",g=l);return g};c=m(c,\"_start\");d=m(d,\"_end\");e=m(e,\"_inc\");\"number\"==typeof c&&\n\"number\"==typeof d?(a=c<d?k():h(),a+=\"(\"+c+\", \"+d+\", \"+e+\")\"):a=a(c,d,e)}return n+=\"for \"+b+\" in \"+a+\":\\n\"+f};Blockly.Python.controls_forEach=function(a){var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME),c=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_RELATIONAL)||\"[]\",d=Blockly.Python.statementToCode(a,\"DO\");d=Blockly.Python.addLoopTrap(d,a)||Blockly.Python.PASS;return\"for \"+b+\" in \"+c+\":\\n\"+d};\nBlockly.Python.controls_flow_statements=function(a){var b=\"\";Blockly.Python.STATEMENT_PREFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));Blockly.Python.STATEMENT_SUFFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a));if(Blockly.Python.STATEMENT_PREFIX){var c=Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);c&&!c.suppressPrefixSuffix&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,c))}switch(a.getFieldValue(\"FLOW\")){case \"BREAK\":return b+\n\"break\\n\";case \"CONTINUE\":return b+\"continue\\n\"}throw Error(\"Unknown flow statement.\");};Blockly.Python.math={};Blockly.Python.addReservedWords(\"math,random,Number\");Blockly.Python.math_number=function(a){a=Number(a.getFieldValue(\"NUM\"));if(Infinity==a){a='float(\"inf\")';var b=Blockly.Python.ORDER_FUNCTION_CALL}else-Infinity==a?(a='-float(\"inf\")',b=Blockly.Python.ORDER_UNARY_SIGN):b=0>a?Blockly.Python.ORDER_UNARY_SIGN:Blockly.Python.ORDER_ATOMIC;return[a,b]};\nBlockly.Python.math_arithmetic=function(a){var b={ADD:[\" + \",Blockly.Python.ORDER_ADDITIVE],MINUS:[\" - \",Blockly.Python.ORDER_ADDITIVE],MULTIPLY:[\" * \",Blockly.Python.ORDER_MULTIPLICATIVE],DIVIDE:[\" / \",Blockly.Python.ORDER_MULTIPLICATIVE],POWER:[\" ** \",Blockly.Python.ORDER_EXPONENTIATION]}[a.getFieldValue(\"OP\")],c=b[0];b=b[1];var d=Blockly.Python.valueToCode(a,\"A\",b)||\"0\";a=Blockly.Python.valueToCode(a,\"B\",b)||\"0\";return[d+c+a,b]};\nBlockly.Python.math_single=function(a){var b=a.getFieldValue(\"OP\");if(\"NEG\"==b){var c=Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_UNARY_SIGN)||\"0\";return[\"-\"+c,Blockly.Python.ORDER_UNARY_SIGN]}Blockly.Python.definitions_.import_math=\"import math\";a=\"SIN\"==b||\"COS\"==b||\"TAN\"==b?Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\":Blockly.Python.valueToCode(a,\"NUM\",Blockly.Python.ORDER_NONE)||\"0\";switch(b){case \"ABS\":c=\"math.fabs(\"+a+\")\";break;case \"ROOT\":c=\"math.sqrt(\"+\na+\")\";break;case \"LN\":c=\"math.log(\"+a+\")\";break;case \"LOG10\":c=\"math.log10(\"+a+\")\";break;case \"EXP\":c=\"math.exp(\"+a+\")\";break;case \"POW10\":c=\"math.pow(10,\"+a+\")\";break;case \"ROUND\":c=\"round(\"+a+\")\";break;case \"ROUNDUP\":c=\"math.ceil(\"+a+\")\";break;case \"ROUNDDOWN\":c=\"math.floor(\"+a+\")\";break;case \"SIN\":c=\"math.sin(\"+a+\" / 180.0 * math.pi)\";break;case \"COS\":c=\"math.cos(\"+a+\" / 180.0 * math.pi)\";break;case \"TAN\":c=\"math.tan(\"+a+\" / 180.0 * math.pi)\"}if(c)return[c,Blockly.Python.ORDER_FUNCTION_CALL];switch(b){case \"ASIN\":c=\n\"math.asin(\"+a+\") / math.pi * 180\";break;case \"ACOS\":c=\"math.acos(\"+a+\") / math.pi * 180\";break;case \"ATAN\":c=\"math.atan(\"+a+\") / math.pi * 180\";break;default:throw Error(\"Unknown math operator: \"+b);}return[c,Blockly.Python.ORDER_MULTIPLICATIVE]};\nBlockly.Python.math_constant=function(a){var b={PI:[\"math.pi\",Blockly.Python.ORDER_MEMBER],E:[\"math.e\",Blockly.Python.ORDER_MEMBER],GOLDEN_RATIO:[\"(1 + math.sqrt(5)) / 2\",Blockly.Python.ORDER_MULTIPLICATIVE],SQRT2:[\"math.sqrt(2)\",Blockly.Python.ORDER_MEMBER],SQRT1_2:[\"math.sqrt(1.0 / 2)\",Blockly.Python.ORDER_MEMBER],INFINITY:[\"float('inf')\",Blockly.Python.ORDER_ATOMIC]};a=a.getFieldValue(\"CONSTANT\");\"INFINITY\"!=a&&(Blockly.Python.definitions_.import_math=\"import math\");return b[a]};\nBlockly.Python.math_number_property=function(a){var b=Blockly.Python.valueToCode(a,\"NUMBER_TO_CHECK\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\",c=a.getFieldValue(\"PROPERTY\");if(\"PRIME\"==c)return Blockly.Python.definitions_.import_math=\"import math\",Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\",[Blockly.Python.provideFunction_(\"math_isPrime\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(n):\",\"  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\",\n\"  # If n is not a number but a string, try parsing it.\",\"  if not isinstance(n, Number):\",\"    try:\",\"      n = float(n)\",\"    except:\",\"      return False\",\"  if n == 2 or n == 3:\",\"    return True\",\"  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\",\"  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\",\"    return False\",\"  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\",\"  for x in range(6, int(math.sqrt(n)) + 2, 6):\",\"    if n % (x - 1) == 0 or n % (x + 1) == 0:\",\n\"      return False\",\"  return True\"])+\"(\"+b+\")\",Blockly.Python.ORDER_FUNCTION_CALL];switch(c){case \"EVEN\":var d=b+\" % 2 == 0\";break;case \"ODD\":d=b+\" % 2 == 1\";break;case \"WHOLE\":d=b+\" % 1 == 0\";break;case \"POSITIVE\":d=b+\" > 0\";break;case \"NEGATIVE\":d=b+\" < 0\";break;case \"DIVISIBLE_BY\":a=Blockly.Python.valueToCode(a,\"DIVISOR\",Blockly.Python.ORDER_MULTIPLICATIVE);if(!a||\"0\"==a)return[\"False\",Blockly.Python.ORDER_ATOMIC];d=b+\" % \"+a+\" == 0\"}return[d,Blockly.Python.ORDER_RELATIONAL]};\nBlockly.Python.math_change=function(a){Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\";var b=Blockly.Python.valueToCode(a,\"DELTA\",Blockly.Python.ORDER_ADDITIVE)||\"0\";a=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME);return a+\" = (\"+a+\" if isinstance(\"+a+\", Number) else 0) + \"+b+\"\\n\"};Blockly.Python.math_round=Blockly.Python.math_single;Blockly.Python.math_trig=Blockly.Python.math_single;\nBlockly.Python.math_on_list=function(a){var b=a.getFieldValue(\"OP\");a=Blockly.Python.valueToCode(a,\"LIST\",Blockly.Python.ORDER_NONE)||\"[]\";switch(b){case \"SUM\":b=\"sum(\"+a+\")\";break;case \"MIN\":b=\"min(\"+a+\")\";break;case \"MAX\":b=\"max(\"+a+\")\";break;case \"AVERAGE\":Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\";b=Blockly.Python.provideFunction_(\"math_mean\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(myList):\",\"  localList = [e for e in myList if isinstance(e, Number)]\",\n\"  if not localList: return\",\"  return float(sum(localList)) / len(localList)\"]);b=b+\"(\"+a+\")\";break;case \"MEDIAN\":Blockly.Python.definitions_.from_numbers_import_Number=\"from numbers import Number\";b=Blockly.Python.provideFunction_(\"math_median\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(myList):\",\"  localList = sorted([e for e in myList if isinstance(e, Number)])\",\"  if not localList: return\",\"  if len(localList) % 2 == 0:\",\"    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\",\n\"  else:\",\"    return localList[(len(localList) - 1) // 2]\"]);b=b+\"(\"+a+\")\";break;case \"MODE\":b=Blockly.Python.provideFunction_(\"math_modes\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(some_list):\",\"  modes = []\",\"  # Using a lists of [item, count] to keep count rather than dict\",'  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.',\"  counts = []\",\"  maxCount = 1\",\"  for item in some_list:\",\"    found = False\",\"    for count in counts:\",\"      if count[0] == item:\",\n\"        count[1] += 1\",\"        maxCount = max(maxCount, count[1])\",\"        found = True\",\"    if not found:\",\"      counts.append([item, 1])\",\"  for counted_item, item_count in counts:\",\"    if item_count == maxCount:\",\"      modes.append(counted_item)\",\"  return modes\"]);b=b+\"(\"+a+\")\";break;case \"STD_DEV\":Blockly.Python.definitions_.import_math=\"import math\";b=Blockly.Python.provideFunction_(\"math_standard_deviation\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(numbers):\",\"  n = len(numbers)\",\n\"  if n == 0: return\",\"  mean = float(sum(numbers)) / n\",\"  variance = sum((x - mean) ** 2 for x in numbers) / n\",\"  return math.sqrt(variance)\"]);b=b+\"(\"+a+\")\";break;case \"RANDOM\":Blockly.Python.definitions_.import_random=\"import random\";b=\"random.choice(\"+a+\")\";break;default:throw Error(\"Unknown operator: \"+b);}return[b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.math_modulo=function(a){var b=Blockly.Python.valueToCode(a,\"DIVIDEND\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\";a=Blockly.Python.valueToCode(a,\"DIVISOR\",Blockly.Python.ORDER_MULTIPLICATIVE)||\"0\";return[b+\" % \"+a,Blockly.Python.ORDER_MULTIPLICATIVE]};\nBlockly.Python.math_constrain=function(a){var b=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"0\",c=Blockly.Python.valueToCode(a,\"LOW\",Blockly.Python.ORDER_NONE)||\"0\";a=Blockly.Python.valueToCode(a,\"HIGH\",Blockly.Python.ORDER_NONE)||\"float('inf')\";return[\"min(max(\"+b+\", \"+c+\"), \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.math_random_int=function(a){Blockly.Python.definitions_.import_random=\"import random\";var b=Blockly.Python.valueToCode(a,\"FROM\",Blockly.Python.ORDER_NONE)||\"0\";a=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"0\";return[\"random.randint(\"+b+\", \"+a+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_random_float=function(a){Blockly.Python.definitions_.import_random=\"import random\";return[\"random.random()\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.math_atan2=function(a){Blockly.Python.definitions_.import_math=\"import math\";var b=Blockly.Python.valueToCode(a,\"X\",Blockly.Python.ORDER_NONE)||\"0\";return[\"math.atan2(\"+(Blockly.Python.valueToCode(a,\"Y\",Blockly.Python.ORDER_NONE)||\"0\")+\", \"+b+\") / math.pi * 180\",Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.procedures={};\nBlockly.Python.procedures_defreturn=function(a){for(var b=[],c,d=a.workspace,e=Blockly.Variables.allUsedVarModels(d)||[],f=0;c=e[f];f++)c=c.name,-1==a.getVars().indexOf(c)&&b.push(Blockly.Python.variableDB_.getName(c,Blockly.VARIABLE_CATEGORY_NAME));e=Blockly.Variables.allDeveloperVariables(d);for(f=0;f<e.length;f++)b.push(Blockly.Python.variableDB_.getName(e[f],Blockly.Names.DEVELOPER_VARIABLE_TYPE));b=b.length?Blockly.Python.INDENT+\"global \"+b.join(\", \")+\"\\n\":\"\";d=Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"),Blockly.PROCEDURE_CATEGORY_NAME);\nc=\"\";Blockly.Python.STATEMENT_PREFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));Blockly.Python.STATEMENT_SUFFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a));c&&(c=Blockly.Python.prefixLines(c,Blockly.Python.INDENT));var n=\"\";Blockly.Python.INFINITE_LOOP_TRAP&&(n=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.INFINITE_LOOP_TRAP,a),Blockly.Python.INDENT));var k=Blockly.Python.statementToCode(a,\"STACK\"),h=Blockly.Python.valueToCode(a,\"RETURN\",\nBlockly.Python.ORDER_NONE)||\"\",m=\"\";k&&h&&(m=c);h?h=Blockly.Python.INDENT+\"return \"+h+\"\\n\":k||(k=Blockly.Python.PASS);var g=[];e=a.getVars();for(f=0;f<e.length;f++)g[f]=Blockly.Python.variableDB_.getName(e[f],Blockly.VARIABLE_CATEGORY_NAME);b=\"def \"+d+\"(\"+g.join(\", \")+\"):\\n\"+b+c+n+k+m+h;b=Blockly.Python.scrub_(a,b);Blockly.Python.definitions_[\"%\"+d]=b;return null};Blockly.Python.procedures_defnoreturn=Blockly.Python.procedures_defreturn;\nBlockly.Python.procedures_callreturn=function(a){for(var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"NAME\"),Blockly.PROCEDURE_CATEGORY_NAME),c=[],d=a.getVars(),e=0;e<d.length;e++)c[e]=Blockly.Python.valueToCode(a,\"ARG\"+e,Blockly.Python.ORDER_NONE)||\"None\";return[b+\"(\"+c.join(\", \")+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.procedures_callnoreturn=function(a){return Blockly.Python.procedures_callreturn(a)[0]+\"\\n\"};\nBlockly.Python.procedures_ifreturn=function(a){var b=\"if \"+(Blockly.Python.valueToCode(a,\"CONDITION\",Blockly.Python.ORDER_NONE)||\"False\")+\":\\n\";Blockly.Python.STATEMENT_SUFFIX&&(b+=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT));a.hasReturnValue_?(a=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"None\",b+=Blockly.Python.INDENT+\"return \"+a+\"\\n\"):b+=Blockly.Python.INDENT+\"return\\n\";return b};Blockly.Python.texts={};Blockly.Python.text=function(a){return[Blockly.Python.quote_(a.getFieldValue(\"TEXT\")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.text_multiline=function(a){return[Blockly.Python.multiline_quote_(a.getFieldValue(\"TEXT\")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.text.forceString_=function(a){return Blockly.Python.text.forceString_.strRegExp.test(a)?a:\"str(\"+a+\")\"};Blockly.Python.text.forceString_.strRegExp=/^\\s*'([^']|\\\\')*'\\s*$/;\nBlockly.Python.text_join=function(a){switch(a.itemCount_){case 0:return[\"''\",Blockly.Python.ORDER_ATOMIC];case 1:return a=Blockly.Python.valueToCode(a,\"ADD0\",Blockly.Python.ORDER_NONE)||\"''\",a=Blockly.Python.text.forceString_(a),[a,Blockly.Python.ORDER_FUNCTION_CALL];case 2:var b=Blockly.Python.valueToCode(a,\"ADD0\",Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.valueToCode(a,\"ADD1\",Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.text.forceString_(b)+\" + \"+Blockly.Python.text.forceString_(a);\nreturn[a,Blockly.Python.ORDER_ADDITIVE];default:b=[];for(var c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,\"ADD\"+c,Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.variableDB_.getDistinctName(\"x\",Blockly.VARIABLE_CATEGORY_NAME);a=\"''.join([str(\"+a+\") for \"+a+\" in [\"+b.join(\", \")+\"]])\";return[a,Blockly.Python.ORDER_FUNCTION_CALL]}};\nBlockly.Python.text_append=function(a){var b=Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME);a=Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_NONE)||\"''\";return b+\" = str(\"+b+\") + \"+Blockly.Python.text.forceString_(a)+\"\\n\"};Blockly.Python.text_length=function(a){return[\"len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"''\")+\")\",Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_isEmpty=function(a){return[\"not len(\"+(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"''\")+\")\",Blockly.Python.ORDER_LOGICAL_NOT]};\nBlockly.Python.text_indexOf=function(a){var b=\"FIRST\"==a.getFieldValue(\"END\")?\"find\":\"rfind\",c=Blockly.Python.valueToCode(a,\"FIND\",Blockly.Python.ORDER_NONE)||\"''\";b=(Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_MEMBER)||\"''\")+\".\"+b+\"(\"+c+\")\";return a.workspace.options.oneBasedIndex?[b+\" + 1\",Blockly.Python.ORDER_ADDITIVE]:[b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_charAt=function(a){var b=a.getFieldValue(\"WHERE\")||\"FROM_START\",c=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_MEMBER)||\"''\";switch(b){case \"FIRST\":return[c+\"[0]\",Blockly.Python.ORDER_MEMBER];case \"LAST\":return[c+\"[-1]\",Blockly.Python.ORDER_MEMBER];case \"FROM_START\":return a=Blockly.Python.getAdjustedInt(a,\"AT\"),[c+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];case \"FROM_END\":return a=Blockly.Python.getAdjustedInt(a,\"AT\",1,!0),[c+\"[\"+a+\"]\",Blockly.Python.ORDER_MEMBER];case \"RANDOM\":return Blockly.Python.definitions_.import_random=\n\"import random\",[Blockly.Python.provideFunction_(\"text_random_letter\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(text):\",\"  x = int(random.random() * len(text))\",\"  return text[x];\"])+\"(\"+c+\")\",Blockly.Python.ORDER_FUNCTION_CALL]}throw Error(\"Unhandled option (text_charAt).\");};\nBlockly.Python.text_getSubstring=function(a){var b=a.getFieldValue(\"WHERE1\"),c=a.getFieldValue(\"WHERE2\"),d=Blockly.Python.valueToCode(a,\"STRING\",Blockly.Python.ORDER_MEMBER)||\"''\";switch(b){case \"FROM_START\":b=Blockly.Python.getAdjustedInt(a,\"AT1\");\"0\"==b&&(b=\"\");break;case \"FROM_END\":b=Blockly.Python.getAdjustedInt(a,\"AT1\",1,!0);break;case \"FIRST\":b=\"\";break;default:throw Error(\"Unhandled option (text_getSubstring)\");}switch(c){case \"FROM_START\":a=Blockly.Python.getAdjustedInt(a,\"AT2\",1);break;case \"FROM_END\":a=\nBlockly.Python.getAdjustedInt(a,\"AT2\",0,!0);Blockly.isNumber(String(a))?\"0\"==a&&(a=\"\"):(Blockly.Python.definitions_.import_sys=\"import sys\",a+=\" or sys.maxsize\");break;case \"LAST\":a=\"\";break;default:throw Error(\"Unhandled option (text_getSubstring)\");}return[d+\"[\"+b+\" : \"+a+\"]\",Blockly.Python.ORDER_MEMBER]};\nBlockly.Python.text_changeCase=function(a){var b={UPPERCASE:\".upper()\",LOWERCASE:\".lower()\",TITLECASE:\".title()\"}[a.getFieldValue(\"CASE\")];return[(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\")+b,Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.text_trim=function(a){var b={LEFT:\".lstrip()\",RIGHT:\".rstrip()\",BOTH:\".strip()\"}[a.getFieldValue(\"MODE\")];return[(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\")+b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_print=function(a){return\"print(\"+(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_NONE)||\"''\")+\")\\n\"};\nBlockly.Python.text_prompt_ext=function(a){var b=Blockly.Python.provideFunction_(\"text_prompt\",[\"def \"+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+\"(msg):\",\"  try:\",\"    return raw_input(msg)\",\"  except NameError:\",\"    return input(msg)\"]),c=a.getField(\"TEXT\")?Blockly.Python.quote_(a.getFieldValue(\"TEXT\")):Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_NONE)||\"''\";b=b+\"(\"+c+\")\";\"NUMBER\"==a.getFieldValue(\"TYPE\")&&(b=\"float(\"+b+\")\");return[b,Blockly.Python.ORDER_FUNCTION_CALL]};\nBlockly.Python.text_prompt=Blockly.Python.text_prompt_ext;Blockly.Python.text_count=function(a){var b=Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\";a=Blockly.Python.valueToCode(a,\"SUB\",Blockly.Python.ORDER_NONE)||\"''\";return[b+\".count(\"+a+\")\",Blockly.Python.ORDER_MEMBER]};\nBlockly.Python.text_replace=function(a){var b=Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\",c=Blockly.Python.valueToCode(a,\"FROM\",Blockly.Python.ORDER_NONE)||\"''\";a=Blockly.Python.valueToCode(a,\"TO\",Blockly.Python.ORDER_NONE)||\"''\";return[b+\".replace(\"+c+\", \"+a+\")\",Blockly.Python.ORDER_MEMBER]};Blockly.Python.text_reverse=function(a){return[(Blockly.Python.valueToCode(a,\"TEXT\",Blockly.Python.ORDER_MEMBER)||\"''\")+\"[::-1]\",Blockly.Python.ORDER_MEMBER]};Blockly.Python.variables={};Blockly.Python.variables_get=function(a){return[Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.variables_set=function(a){var b=Blockly.Python.valueToCode(a,\"VALUE\",Blockly.Python.ORDER_NONE)||\"0\";return Blockly.Python.variableDB_.getName(a.getFieldValue(\"VAR\"),Blockly.VARIABLE_CATEGORY_NAME)+\" = \"+b+\"\\n\"};Blockly.Python.variablesDynamic={};Blockly.Python.variables_get_dynamic=Blockly.Python.variables_get;Blockly.Python.variables_set_dynamic=Blockly.Python.variables_set;\nreturn Blockly.Python;\n}));\n\n\n//# sourceMappingURL=python_compressed.js.map\n"]},"metadata":{},"sourceType":"script"}