{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oneto\\\\OneDrive\\\\Desktop\\\\blockly\\\\src\\\\App.js\";\nimport React, { useRef, useState } from \"react\";\nimport BlocklyComponent, { Block, Value, Field, Category } from \"./Blockly\";\nimport BlocklyPython from \"blockly/python\";\nimport { babyAiService, exportWorkspace, downloadSavedWorkspace } from \"./services/babyAiService\";\nimport { CodeBlock, dracula } from \"react-code-blocks\";\nimport Blockly, { Workspace } from 'blockly';\nimport \"./blocks/customblocks\";\nimport \"./generator/generator\";\nimport \"./App.css\"; //Container of result from server\n\nconst ConsoleComponent = ({\n  data = []\n}) => {\n  const items = data.map((val, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"itemsResult\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, val);\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      padding: \"0 5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \"Output Result\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapperItemResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, items));\n}; //Top bar componenet NOTE that save and load is in developed\n\n\nconst NavbarComponent = ({\n  generateCode,\n  toggle,\n  save,\n  input\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      padding: \"10px\",\n      borderBottom: \"1px solid #d2d2d2\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      padding: 0,\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Blockly Editor\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggle,\n    className: \"previewBtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Preview\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: generateCode,\n    className: \"compileBtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Execute\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: save,\n    className: \"saveBtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"file\",\n    onChange: input,\n    className: \"custom-file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })));\n}; //Blockly workspace html, you may add your defined block here\n\n\nconst WorkspaceComponent = ({\n  initWorkspaceRef\n}) => {\n  return /*#__PURE__*/React.createElement(BlocklyComponent, {\n    ref: instanceRef => {\n      initWorkspaceRef(instanceRef);\n    },\n    readOnly: false,\n    trashcan: true,\n    media: \"media/\",\n    move: {\n      scrollbars: true,\n      drag: true,\n      wheel: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Category, {\n    name: \"Logic\",\n    colour: \"210\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Block, {\n    type: \"controls_if\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"logic_compare\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"logic_operation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"logic_negate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"logic_boolean\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Category, {\n    name: \"Loops\",\n    colour: \"120\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Block, {\n    type: \"controls_repeat_ext\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Value, {\n    name: \"TIMES\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Block, {\n    type: \"math_number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"NUM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \"10\")))), /*#__PURE__*/React.createElement(Block, {\n    type: \"controls_whileUntil\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Category, {\n    name: \"Text\",\n    colour: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Block, {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"text_length\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"text_print\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Category, {\n    name: \"Math\",\n    colour: \"230\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Block, {\n    type: \"math_number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"math_arithmetic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"math_single\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Category, {\n    name: \"MeCab\",\n    colour: \"30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Block, {\n    type: \"ws_import_mecab\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"ws_tagger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Block, {\n    type: \"text_print\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  })));\n}; //Main application window\n\n\nconst App = () => {\n  var loadedContent = \"\";\n  var savedFilename = \"\";\n  const workspaceRef = useRef(null); //workspace ref\n\n  const [togglePreviewCode, setTogglePreviewCode] = useState(false);\n  const [executeCodeResponse, setExecuteCodeResponse] = useState([]);\n  const [codePreview, setCodePreview] = useState(\"\");\n\n  const getCode = () => {\n    let codeFromBlock = BlocklyPython.workspaceToCode( //convert code to python\n    workspaceRef.current.workspace);\n    setCodePreview(codeFromBlock);\n    return codeFromBlock;\n  };\n\n  Blockly.Workspace.addChangeListener(updateText);\n\n  const updateText = event => {\n    if (event.type == Blockly.Events.BLOCK_CHANGE) {\n      alert('workspaceChange');\n    }\n\n    var code = BlocklyPython.workspaceToCode(workspaceRef.current.workspace);\n    if (code == null) code = \"🔥 #Let's Started upcode 🔥 \\n\\n\\n\\n\\n\\n\\n\\n\\n\"; //document.getElementById(\"codeBlockText\").Value = code; //code to element (DIRECTLY HTML)\n    //document.getElementById(\"codeBlockText\").innerHTML =code; //code to text element (DIRECTLY HTML)\n\n    setCodePreview(code);\n    return code;\n  };\n\n  const saveWorkspace = () => {\n    try {\n      var xml = Blockly.Xml.workspaceToDom(workspaceRef.current.workspace); //convert all block to xml\n\n      var xml_text = Blockly.Xml.domToText(xml); //convert xml to text\n\n      const response = exportWorkspace(xml_text).then(res => {\n        //Open an new browser tab to trigger built-in downloader \n        savedFilename = res.data.split(',')[1].split(':')[1];\n        const BASE_URL = `http://babyai.org:5000/workspace/export/download/` + savedFilename.replace(/'/g, '');\n        const HEADERS = {\n          \"Accept\": \"*/*\"\n        };\n        window.open(BASE_URL, '_blank');\n      }).catch(err => {\n        alert(err);\n      });\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  const loadWorkspace = () => {\n    try {\n      const XML = Blockly.Xml.textToDom(loadedContent);\n      Blockly.Xml.clearWorkspaceAndLoadFromXml(XML, workspaceRef.current.workspace);\n    } catch (e) {\n      alert(e);\n      alert('File may be corrupted!');\n    }\n  }; //Generate code from block connection\n\n\n  const generateCode = async () => {\n    const codeFromBlock = updateText(); //getCode();\n\n    try {\n      const response = await babyAiService(codeFromBlock);\n      setExecuteCodeResponse(response.data.split(\"\\n\"));\n    } catch (e) {\n      alert('Cannot execute a code for reason: ' + e);\n    }\n  }; //Toggle preview code besied OUTPUT tab\n\n\n  const onHandlerTogglePreviewCode = () => {\n    const toggle = togglePreviewCode ? false : true; //getCode();\n\n    updateText();\n    setTogglePreviewCode(toggle);\n  };\n\n  const onFileChangeHandle = event => {\n    try {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        const text = e.target.result;\n        loadedContent = text;\n        loadWorkspace();\n      };\n\n      reader.readAsText(event.target.files[0]);\n    } catch (e) {\n      console.log(e);\n    }\n  }; //Main rendered window, blockly workspace reference object is called here\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavbarComponent, {\n    generateCode: generateCode,\n    toggle: onHandlerTogglePreviewCode,\n    save: saveWorkspace,\n    input: onFileChangeHandle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(WorkspaceComponent, {\n    initWorkspaceRef: ref => {\n      workspaceRef.current = ref; // Prevent flyout from automatically closed\n\n      Blockly.Flyout.prototype.autoClose = false;\n      Blockly.workspace.removeChangeListener(updateText);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: togglePreviewCode ? \"none\" : \"initial\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleComponent, {\n    data: executeCodeResponse.map(val => `> ${val}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: togglePreviewCode ? \"initial\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapperToggleView\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleComponent, {\n    data: executeCodeResponse.map(val => `> ${val}`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      padding: \"0 5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  }, \"Python Code\")), /*#__PURE__*/React.createElement(CodeBlock, {\n    text:\n    /*codePreview === \"\"\n     ? \"🔥 #Let's Started 🔥 \\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n     :*/\n    codePreview,\n    language: \"python\",\n    showLineNumbers: true,\n    theme: dracula,\n    codeBlock: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default new App();","map":{"version":3,"sources":["C:/Users/oneto/OneDrive/Desktop/blockly/src/App.js"],"names":["React","useRef","useState","BlocklyComponent","Block","Value","Field","Category","BlocklyPython","babyAiService","exportWorkspace","downloadSavedWorkspace","CodeBlock","dracula","Blockly","Workspace","ConsoleComponent","data","items","map","val","index","padding","NavbarComponent","generateCode","toggle","save","input","display","flexDirection","alignItems","borderBottom","flex","margin","WorkspaceComponent","initWorkspaceRef","instanceRef","scrollbars","drag","wheel","App","loadedContent","savedFilename","workspaceRef","togglePreviewCode","setTogglePreviewCode","executeCodeResponse","setExecuteCodeResponse","codePreview","setCodePreview","getCode","codeFromBlock","workspaceToCode","current","workspace","addChangeListener","updateText","event","type","Events","BLOCK_CHANGE","alert","code","saveWorkspace","xml","Xml","workspaceToDom","xml_text","domToText","response","then","res","split","BASE_URL","replace","HEADERS","window","open","catch","err","e","loadWorkspace","XML","textToDom","clearWorkspaceAndLoadFromXml","onHandlerTogglePreviewCode","onFileChangeHandle","reader","FileReader","onload","text","target","result","readAsText","files","console","log","ref","Flyout","prototype","autoClose","removeChangeListener"],"mappings":"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","sourcesContent":["import React, { useRef, useState} from \"react\";\nimport BlocklyComponent, { Block, Value, Field, Category } from \"./Blockly\";\nimport BlocklyPython from \"blockly/python\";\nimport { babyAiService, exportWorkspace, downloadSavedWorkspace } from \"./services/babyAiService\";\nimport { CodeBlock, dracula } from \"react-code-blocks\";\nimport Blockly, { Workspace } from 'blockly'\n\n\n\nimport \"./blocks/customblocks\";\nimport \"./generator/generator\";\nimport \"./App.css\";\n\n\n//Container of result from server\nconst ConsoleComponent = ({ data = [] }) => {\n  const items = data.map((val, index) => {\n    return (\n      <div className=\"itemsResult\" key={index}>\n        {val}\n      </div>\n    );\n  });\n  return (\n    <>\n      <p style={{ padding: \"0 5px\" }}>\n        <b>Output Result</b>\n      </p>\n      <div className=\"wrapperItemResult\">{items}</div>\n    </>\n  );\n};\n\n//Top bar componenet NOTE that save and load is in developed\nconst NavbarComponent = ({ generateCode, toggle, save, input}) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        padding: \"10px\",\n        borderBottom: \"1px solid #d2d2d2\",\n      }}\n    >\n      <div style={{ flex: 1 }}>\n        <h3\n          style={{\n            padding: 0,\n            margin: 0,\n          }}\n        >\n          Blockly Editor\n        </h3>\n      </div>\n      <div style={{}}>\n        <button onClick={toggle} className=\"previewBtn\">\n          Preview\n        </button>\n        <button onClick={generateCode} className=\"compileBtn\">\n          Execute\n        </button>\n        {/* Wait for API Line to save and download xml file */}\n        <button onClick={save} className=\"saveBtn\">\n          Save\n        </button>\n        <input type=\"file\" name=\"file\" onChange={input} className=\"custom-file-input\"/>\n        \n      </div>\n    </div>\n  );\n};\n\n//Blockly workspace html, you may add your defined block here\nconst WorkspaceComponent = ({ initWorkspaceRef }) => {\n  return (\n    <BlocklyComponent\n      ref={(instanceRef) => {\n        initWorkspaceRef(instanceRef);\n      }}\n      readOnly={false}\n      trashcan={true}\n      media={\"media/\"}\n      move={{ scrollbars: true, drag: true, wheel: true }}\n    >\n      <Category name=\"Logic\" colour=\"210\">\n        <Block type=\"controls_if\"></Block>\n        <Block type=\"logic_compare\"></Block>\n        <Block type=\"logic_operation\"></Block>\n        <Block type=\"logic_negate\"></Block>\n        <Block type=\"logic_boolean\"></Block>\n      </Category>\n      <Category name=\"Loops\" colour=\"120\">\n        <Block type=\"controls_repeat_ext\">\n          <Value name=\"TIMES\">\n            <Block type=\"math_number\">\n              <Field name=\"NUM\">10</Field>\n            </Block>\n          </Value>\n        </Block>\n        <Block type=\"controls_whileUntil\"></Block>\n      </Category>\n      <Category name=\"Text\" colour=\"20\">\n        <Block type=\"text\"></Block>\n        <Block type=\"text_length\"></Block>\n        <Block type=\"text_print\"></Block>\n      </Category>\n      <Category name=\"Math\" colour=\"230\">\n        <Block type=\"math_number\"></Block>\n        <Block type=\"math_arithmetic\"></Block>\n        <Block type=\"math_single\"></Block>\n      </Category>\n\n      {/* Add our custom block category, tou can place it outside category as well */}\n      <Category name=\"MeCab\" colour=\"30\">\n        <Block type=\"ws_import_mecab\"></Block>\n        <Block type=\"ws_tagger\"></Block>\n        <Block type=\"text\"></Block>\n        <Block type=\"text_print\"></Block>\n      </Category>\n    </BlocklyComponent>\n  );\n};\n\n//Main application window\nconst App = () => {\n  var loadedContent = \"\"\n  var savedFilename = \"\"\n  const workspaceRef = useRef(null); //workspace ref\n\n  const [togglePreviewCode, setTogglePreviewCode] = useState(false);\n  const [executeCodeResponse, setExecuteCodeResponse] = useState([]);\n  const [codePreview, setCodePreview] = useState(\"\");\n  \n    const getCode = () => {\n     let codeFromBlock = \n        BlocklyPython.workspaceToCode(  //convert code to python\n        workspaceRef.current.workspace\n      );\n      setCodePreview(codeFromBlock);\n    \n    return codeFromBlock;\n  };\n\n  Blockly.Workspace.addChangeListener(updateText);\n\n  const updateText = (event) =>{\n    if(event.type == Blockly.Events.BLOCK_CHANGE  ){\n      alert('workspaceChange');\n    \n    }\n    var code = BlocklyPython.workspaceToCode(workspaceRef.current.workspace);\n    if(code == null)\n      code = \"🔥 #Let's Started upcode 🔥 \\n\\n\\n\\n\\n\\n\\n\\n\\n\";\n    //document.getElementById(\"codeBlockText\").Value = code; //code to element (DIRECTLY HTML)\n    //document.getElementById(\"codeBlockText\").innerHTML =code; //code to text element (DIRECTLY HTML)\n    setCodePreview(code);\n    return(code);\n  }\n\n\nconst saveWorkspace =() => {\n    try {\n      var xml = Blockly.Xml.workspaceToDom(workspaceRef.current.workspace); //convert all block to xml\n      var xml_text = Blockly.Xml.domToText(xml); //convert xml to text\n      const response = exportWorkspace(xml_text).then(res => {\n        //Open an new browser tab to trigger built-in downloader \n        savedFilename = res.data.split(',')[1].split(':')[1];\n        const BASE_URL = `http://babyai.org:5000/workspace/export/download/` + savedFilename.replace(/'/g, '');\n        const HEADERS = {\n          \"Accept\": \"*/*\",\n        };\n        window.open(BASE_URL, '_blank');\n      }).catch(err => {\n        alert(err);\n      });\n\n    } catch (e) {\n      alert(e);\n    }\n  }\n  \n  const loadWorkspace = () => {\n    try {\n      const XML = Blockly.Xml.textToDom(loadedContent)\n      Blockly.Xml.clearWorkspaceAndLoadFromXml(XML, workspaceRef.current.workspace)\n    }catch(e){\n      alert(e)\n      alert('File may be corrupted!')\n    }\n\n  }\n  //Generate code from block connection\n  const generateCode = async () => {\n    const codeFromBlock = updateText();//getCode();\n    try{\n    const response = await babyAiService(codeFromBlock);\n    setExecuteCodeResponse(response.data.split(\"\\n\"));\n    }catch(e) {\n      alert('Cannot execute a code for reason: ' + e)\n    }\n  };\n  //Toggle preview code besied OUTPUT tab\n  const onHandlerTogglePreviewCode = () => {\n    const toggle = togglePreviewCode ? false : true;\n    //getCode();\n    updateText();\n    setTogglePreviewCode(toggle);\n  };\n\n  const onFileChangeHandle = (event) => {\n    try {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const text = (e.target.result)\n        loadedContent = text;\n        loadWorkspace();\n      }\n      reader.readAsText(event.target.files[0])\n    }catch(e) {\n      console.log(e)\n    }\n  }\n\n  //Main rendered window, blockly workspace reference object is called here\n  \n  return (\n    <>\n      <NavbarComponent\n        generateCode={generateCode}\n        toggle={onHandlerTogglePreviewCode}\n        save={saveWorkspace}\n        input={onFileChangeHandle}\n      />\n        <WorkspaceComponent\n          initWorkspaceRef={(ref) => {\n            workspaceRef.current = ref;\n            // Prevent flyout from automatically closed\n            Blockly.Flyout.prototype.autoClose = false\n            Blockly.workspace.removeChangeListener(updateText);\n          }}/>\n      <div>\n      {/* PREVIEW button is press (toggle state), disply output*/}\n      <div style={{ display: togglePreviewCode ? \"none\" : \"initial\" }}> \n        <ConsoleComponent data={executeCodeResponse.map((val) => `> ${val}`)} />\n      </div>\n \n      {/* PREVIEW button is press (toggle state), display python code and output side by side*/}\n      <div style={{ display: togglePreviewCode ? \"initial\" : \"none\" }}> \n          <div className=\"wrapperToggleView\">\n            <div className=\"box\">\n              <ConsoleComponent data={executeCodeResponse.map((val) => `> ${val}`)} />\n              \n            </div>\n\n            <div className=\"box\">    \n            <p style={{ padding: \"0 5px\" }}>\n              <b>Python Code</b>\n            </p>      \n              <CodeBlock\n                  text={\n                    /*codePreview === \"\"\n                     ? \"🔥 #Let's Started 🔥 \\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n                     :*/ codePreview\n                  }\n                  language={\"python\"}\n                  showLineNumbers={true}\n                  theme={dracula}\n                  codeBlock\n              />\n            </div>\n           \n          </div>\n      </div>\n      \n      </div>\n      \n    </>\n  );\n};\n\nexport default new App;"]},"metadata":{},"sourceType":"module"}