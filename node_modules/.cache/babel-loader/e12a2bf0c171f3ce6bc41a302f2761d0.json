{"ast":null,"code":"/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\nimport * as Blockly from 'blockly/core'; // Since we're using json to initialize the field, we'll need to import it.\n\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\nvar testReactField = {\n  type: 'test_react_field',\n  message0: 'custom field %1',\n  args0: [{\n    type: 'field_react_component',\n    name: 'FIELD',\n    text: 'Click me'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_field'] = {\n  init: function () {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  }\n};\nvar reactDateField = {\n  type: 'test_react_date_field',\n  message0: 'date field %1',\n  args0: [{\n    type: 'field_react_date',\n    name: 'DATE',\n    date: '01/01/2020'\n  }],\n  previousStatement: null,\n  nextStatement: null\n};\nBlockly.Blocks['test_react_date_field'] = {\n  init: function () {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  }\n}; // var PTNLPImportTokenize = {\n//   \"type\": \"ptnlp_word_tokenize_import\",\n//   \"message0\": \"Use word tokenize of pythainlp\",\n//   \"previousStatement\": null,\n//   \"nextStatement\": null,\n//   \"colour\": 230,\n//   \"tooltip\": \"\",\n//   \"helpUrl\": \"\"\n// }\n// Blockly.Blocks['ptnlp_word_tokenize_import'] = {\n//   init: function() {\n//     this.jsonInit(PTNLPImportTokenize);\n//     this.setStyle('loop_blocks');\n//   }\n// }\n// var PTNLPTokenizeWord = {\n//   \"type\": \"ptnlp_tokenize_word\",\n//   \"message0\": \"Tokenize : %1 with engine %2\",\n//   \"args0\": [\n//     {\n//       \"type\": \"input_value\",\n//       \"name\": \"TEXT_INPUT\",\n//       \"check\": \"String\"\n//     },\n//     {\n//       \"type\": \"field_dropdown\",\n//       \"name\": \"ENGINE\",\n//       \"options\": [\n//         [\n//           \"ICU\",\n//           \"icu\"\n//         ],\n//         [\n//           \"DICTIONARY\",\n//           \"dict\"\n//         ],\n//         [\n//           \"PYLEXTO\",\n//           \"pylexto\"\n//         ],\n//         [\n//           \"MM\",\n//           \"mm\"\n//         ],\n//         [\n//           \"NEW MM\",\n//           \"newmm\"\n//         ]\n//       ]\n//     }\n//   ],\n//   \"inputsInline\": true,\n//   \"output\":null,\n//   \"colour\": 230,\n//   \"tooltip\": \"\",\n//   \"helpUrl\": \"https://pythainlp.readthedocs.io/en/latest/pythainlp-1-4-thai/\"\n// }\n// Blockly.Blocks['ptnlp_tokenize_word'] = {\n//   init: function() {\n//     this.jsonInit(PTNLPTokenizeWord);\n//     this.setStyle('loop_blocks');\n//   }\n// }\n//Example of block creation\n//create variable that contain a block definition in JSON format\n\nvar MeCabImport = {\n  \"type\": \"ws_import_mecab\",\n  \"message0\": \"MeCab import\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n}; //Use the following information to create class\n\nBlockly.Blocks['ws_import_mecab'] = {\n  init: function () {\n    this.jsonInit(MeCabImport);\n    this.setStyle('loop_blocks');\n  }\n};\nvar MeCabOwakatiTagger = {\n  \"type\": \"ws_tagger\",\n  \"message0\": \"text to be segmented: %1\",\n  \"args0\": [{\n    \"type\": \"input_value\",\n    \"name\": \"INPUT_TEXT\",\n    \"check\": \"String\"\n  }],\n  \"inputsInline\": true,\n  \"output\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\nBlockly.Blocks['ws_tagger'] = {\n  init: function () {\n    this.jsonInit(MeCabOwakatiTagger);\n    this.setStyle('loop_blocks');\n  }\n};","map":{"version":3,"sources":["C:/Users/oneto/onedrive/desktop/blockly/src/blocks/customblocks.js"],"names":["Blockly","testReactField","type","message0","args0","name","text","previousStatement","nextStatement","Blocks","init","jsonInit","setStyle","reactDateField","date","MeCabImport","MeCabOwakatiTagger"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAKA;AACA;AAEA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB,C,CAEA;;AACA,OAAO,6BAAP;AACA,OAAO,qBAAP;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,IAAI,EAAE,kBADa;AAEnBC,EAAAA,QAAQ,EAAE,iBAFS;AAGnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,IAAI,EAAE,uBADR;AAEEG,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADK,CAHY;AAUnBC,EAAAA,iBAAiB,EAAE,IAVA;AAWnBC,EAAAA,aAAa,EAAE;AAXI,CAArB;AAcAR,OAAO,CAACS,MAAR,CAAe,kBAAf,IAAqC;AACnCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcV,cAAd;AACA,SAAKW,QAAL,CAAc,aAAd;AACD;AAJkC,CAArC;AAOA,IAAIC,cAAc,GAAG;AACnBX,EAAAA,IAAI,EAAE,uBADa;AAEnBC,EAAAA,QAAQ,EAAE,eAFS;AAGnBC,EAAAA,KAAK,EAAE,CACL;AACEF,IAAAA,IAAI,EAAE,kBADR;AAEEG,IAAAA,IAAI,EAAE,MAFR;AAGES,IAAAA,IAAI,EAAE;AAHR,GADK,CAHY;AAUnBP,EAAAA,iBAAiB,EAAE,IAVA;AAWnBC,EAAAA,aAAa,EAAE;AAXI,CAArB;AAcAR,OAAO,CAACS,MAAR,CAAe,uBAAf,IAA0C;AACxCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcE,cAAd;AACA,SAAKD,QAAL,CAAc,aAAd;AACD;AAJuC,CAA1C,C,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,IAAIG,WAAW,GAAG;AAChB,UAAQ,iBADQ;AAEhB,cAAY,cAFI;AAGhB,uBAAqB,IAHL;AAIhB,mBAAiB,IAJD;AAKhB,YAAU,GALM;AAMhB,aAAW,EANK;AAOhB,aAAW;AAPK,CAAlB,C,CASA;;AACAf,OAAO,CAACS,MAAR,CAAe,iBAAf,IAAoC;AAClCC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcI,WAAd;AACA,SAAKH,QAAL,CAAc,aAAd;AACD;AAJiC,CAApC;AAOA,IAAII,kBAAkB,GAAG;AACvB,UAAQ,WADe;AAEvB,cAAY,0BAFW;AAGvB,WAAS,CACP;AACE,YAAQ,aADV;AAEE,YAAQ,YAFV;AAGE,aAAS;AAHX,GADO,CAHc;AAUvB,kBAAgB,IAVO;AAWvB,YAAU,IAXa;AAYvB,YAAU,GAZa;AAavB,aAAW,EAbY;AAcvB,aAAW;AAdY,CAAzB;AAgBAhB,OAAO,CAACS,MAAR,CAAe,WAAf,IAA8B;AAC5BC,EAAAA,IAAI,EAAE,YAAY;AAChB,SAAKC,QAAL,CAAcK,kBAAd;AACA,SAAKJ,QAAL,CAAc,aAAd;AACD;AAJ2B,CAA9B","sourcesContent":["/**\n * @license\n *\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Define custom blocks.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n// More on defining blocks:\n// https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\n\nimport * as Blockly from 'blockly/core';\n\n// Since we're using json to initialize the field, we'll need to import it.\nimport '../fields/BlocklyReactField';\nimport '../fields/DateField';\n\nvar testReactField = {\n  type: 'test_react_field',\n  message0: 'custom field %1',\n  args0: [\n    {\n      type: 'field_react_component',\n      name: 'FIELD',\n      text: 'Click me',\n    },\n  ],\n  previousStatement: null,\n  nextStatement: null,\n};\n\nBlockly.Blocks['test_react_field'] = {\n  init: function () {\n    this.jsonInit(testReactField);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar reactDateField = {\n  type: 'test_react_date_field',\n  message0: 'date field %1',\n  args0: [\n    {\n      type: 'field_react_date',\n      name: 'DATE',\n      date: '01/01/2020',\n    },\n  ],\n  previousStatement: null,\n  nextStatement: null,\n};\n\nBlockly.Blocks['test_react_date_field'] = {\n  init: function () {\n    this.jsonInit(reactDateField);\n    this.setStyle('loop_blocks');\n  },\n};\n\n// var PTNLPImportTokenize = {\n//   \"type\": \"ptnlp_word_tokenize_import\",\n//   \"message0\": \"Use word tokenize of pythainlp\",\n//   \"previousStatement\": null,\n//   \"nextStatement\": null,\n//   \"colour\": 230,\n//   \"tooltip\": \"\",\n//   \"helpUrl\": \"\"\n// }\n// Blockly.Blocks['ptnlp_word_tokenize_import'] = {\n//   init: function() {\n//     this.jsonInit(PTNLPImportTokenize);\n//     this.setStyle('loop_blocks');\n//   }\n// }\n\n// var PTNLPTokenizeWord = {\n//   \"type\": \"ptnlp_tokenize_word\",\n//   \"message0\": \"Tokenize : %1 with engine %2\",\n//   \"args0\": [\n//     {\n//       \"type\": \"input_value\",\n//       \"name\": \"TEXT_INPUT\",\n//       \"check\": \"String\"\n//     },\n//     {\n//       \"type\": \"field_dropdown\",\n//       \"name\": \"ENGINE\",\n//       \"options\": [\n//         [\n//           \"ICU\",\n//           \"icu\"\n//         ],\n//         [\n//           \"DICTIONARY\",\n//           \"dict\"\n//         ],\n//         [\n//           \"PYLEXTO\",\n//           \"pylexto\"\n//         ],\n//         [\n//           \"MM\",\n//           \"mm\"\n//         ],\n//         [\n//           \"NEW MM\",\n//           \"newmm\"\n//         ]\n//       ]\n//     }\n//   ],\n//   \"inputsInline\": true,\n//   \"output\":null,\n//   \"colour\": 230,\n//   \"tooltip\": \"\",\n//   \"helpUrl\": \"https://pythainlp.readthedocs.io/en/latest/pythainlp-1-4-thai/\"\n// }\n// Blockly.Blocks['ptnlp_tokenize_word'] = {\n//   init: function() {\n//     this.jsonInit(PTNLPTokenizeWord);\n//     this.setStyle('loop_blocks');\n//   }\n// }\n\n//Example of block creation\n//create variable that contain a block definition in JSON format\nvar MeCabImport = {\n  \"type\": \"ws_import_mecab\",\n  \"message0\": \"MeCab import\",\n  \"previousStatement\": null,\n  \"nextStatement\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n};\n//Use the following information to create class\nBlockly.Blocks['ws_import_mecab'] = {\n  init: function () {\n    this.jsonInit(MeCabImport);\n    this.setStyle('loop_blocks');\n  },\n};\n\nvar MeCabOwakatiTagger = {\n  \"type\": \"ws_tagger\",\n  \"message0\": \"text to be segmented: %1\",\n  \"args0\": [\n    {\n      \"type\": \"input_value\",\n      \"name\": \"INPUT_TEXT\",\n      \"check\": \"String\"\n    }\n  ],\n  \"inputsInline\": true,\n  \"output\": null,\n  \"colour\": 230,\n  \"tooltip\": \"\",\n  \"helpUrl\": \"\"\n}\nBlockly.Blocks['ws_tagger'] = {\n  init: function () {\n    this.jsonInit(MeCabOwakatiTagger);\n    this.setStyle('loop_blocks');\n  },\n};"]},"metadata":{},"sourceType":"module"}